#' @param d déductible
#' @param alpha alpha
#' @param lam lambda
#' @param tau tau
#' @export
library(actuar)
#'
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' Elim_burr(d = 2, rate = 2, shape1 = 2, shape2 = 5)
#'
#' # With rate parameter
#' Elim_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
Elim_burr <- function(d, shape1, shape2, rate)
{
1/gamma(shape1) *
rate^(1/shape2) *
gamma(1 + 1/shape2) *
gamma(shape1 - 1/shape2) *
pbeta(q = d^shape2 / (rate + d^shape2),
shape1 = 1 + 1/shape2,
shape2 = shape1 - 1/shape2) +
d *
(rate / (rate + d^shape2)) ^ shape1
}
Elim_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
#'
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' Elim_burr(d = 2, rate = 2, shape1 = 2, shape2 = 5)
#'
#' # With rate parameter
#' Elim_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
Elim_burr <- function(d, shape1, shape2, rate = 1 / scale, scale = 1 / rate)
{
1/gamma(shape1) *
rate^(1/shape2) *
gamma(1 + 1/shape2) *
gamma(shape1 - 1/shape2) *
pbeta(q = d^shape2 / (rate + d^shape2),
shape1 = 1 + 1/shape2,
shape2 = shape1 - 1/shape2) +
d *
(rate / (rate + d^shape2)) ^ shape1
}
Elim_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
Elim_burr(d = 2, rate = 2, shape1 = 2, shape2 = 5)
#' @export
#'
#' @examples
#'
#' # With rate parameter
#' Etronq_burr(d = 2, rate = 2, shape1 = 2, shape2 = 5)
#'
#' # With scale parameter
#' Etronq_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
#'
Etronq_burr <- function(d, shape1, shape2, rate = 1 / scale, scale = 1 / rate) {
1/(gamma(shape1)) *
(rate^(1/shape2)) *
gamma(1 + 1/shape2) *
gamma(shape1 - 1/shape2) *
pbeta(q = (d^shape2 / (rate + (d^shape2))),
shape1 = 1 + 1/shape2,
shape2 = shape1 - 1/shape2)
}
Etronq_burr(d = 2, rate = 2, shape1 = 2, shape2 = 5)
Etronq_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
devtools::load_all(".")
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' Mexcess_burr(d = 2, rate = 2, shape1 = 2, shape2 = 5)
#'
#' # With rate parameter
#' Mexcess_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
#'
Mexcess_burr <- function(d, shape1, shape2, rate = 1 / scale, scale = 1 / rate) {
(
((rate + d^shape2)^shape1) *
gamma(1 + 1/shape2) *
gamma(shape1 - 1/shape2)
) / (
(rate ^ (shape1 - 1/shape2)) *
gamma(shape1)
) *
pbeta(
q = (d^shape2) / (rate + (d^shape2)),
shape1 = 1 + 1/shape2,
shape2 = shape1 - 1/shape2,
lower.tail = F) -
d
}
Mexcess_burr(d = 2, rate = 2, shape1 = 2, shape2 = 5)
Mexcess_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' SL_burr(d = 2, rate = 2, shape1 = 2, shape2 = 5)
#'
#' # With rate parameter
#' SL_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
#'
SL_burr <- function(d, shape1, shape2, rate = 1 / scale, scale = 1 / rate) {
1/(gamma(shape1)) *
(rate^(1/shape2)) *
gamma(1 + 1/shape2) *
gamma(shape1 - 1/shape2) *
pbeta(q = (d^shape2 / (rate + (d^shape2))),
shape1 = 1 + 1/shape2,
shape2 = shape1 - 1/shape2,
lower.tail = F) -
d *
(rate / (rate + d^shape2)) ^ shape1
}
SL_burr(d = 2, rate = 2, shape1 = 2, shape2 = 5)
SL_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' SL_burr(d = 2, rate = 2, shape1 = 2, shape2 = 5)
#'
#' # With rate parameter
#' SL_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
#'
SL_burr <- function(d, shape1, shape2, rate = 1 / scale, scale = 1 / rate) {
1/(gamma(shape1)) *
(rate^(1/shape2)) *
gamma(1 + 1/shape2) *
gamma(shape1 - 1/shape2) *
pbeta(
q = (d^shape2 / (rate + (d^shape2))),
shape1 = 1 + 1/shape2,
shape2 = shape1 - 1/shape2,
lower.tail = F) -
d *
(rate / (rate + d^shape2))^shape1
}
SL_burr(d = 2, rate = 2, shape1 = 2, shape2 = 5)
SL_burr(d = 2, scale = 0.5, shape1 = 2, shape2 = 5)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' kthmoment_burr(k = 2, rate = 2, shape1 = 2, shape2 = 5)
#'
#' # With rate parameter
#' kthmoment_burr(k = 2, scale = 0.5, shape1 = 2, shape2 = 5)
#'
kthmoment_burr <- function(k, shape1, shape2, rate = 1 / scale, scale = 1 / rate)
{
(1/gamma(shape1)) *
rate^(k/shape2) *
gamma(1 + k/shape2) *
gamma(shape1 - k/shape2)
}
kthmoment_burr(k = 2, rate = 2, shape1 = 2, shape2 = 5)
kthmoment_burr(k = 2, scale = 0.5, shape1 = 2, shape2 = 5)
kthmoment_burr(k = 1, scale = 0.5, shape1 = 2, shape2 = 5)
library(tvarPackage)
E_burr(lam = 2, alph = 2, rho = 5)
kthmoment_burr(k = 1, scale = 0.5, shape1 = 2, shape2 = 5)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' TVaR_burr(kappa = 1, rate = 2, shape1 = 2, shape2 = 5)
#'
#' # With rate parameter
#' TVaR_burr(kappa = 1, scale = 0.5, shape1 = 2, shape2 = 5)
#'
TVaR_burr <- function(kappa, shape1, shape2, rate = 1 / scale, scale = 1 / rate, vark) {
1/((1 - kappa) * gamma(shape1)) *
(
(rate^(1 / shape2)) *
gamma(1 + 1 / shape2) *
gamma(shape1 - 1 / shape2) *
pbeta(q = (vark^shape2) / (rate + vark^shape2),
shape1 = 1 + 1 / shape2,
shape2 = shape1 - 1 / shape2,
lower.tail = F)
)
}
VaR_burr
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' TVaR_burr(kappa = 1, rate = 2, shape1 = 2, shape2 = 5, vark = )
#'
#' # With rate parameter
#' TVaR_burr(kappa = 1, scale = 0.5, shape1 = 2, shape2 = 5)
#'
TVaR_burr <- function(kappa, shape1, shape2, rate = 1 / scale, scale = 1 / rate) {
vark <- VaR_burr(kappa, shape1, shape2, rate)
1/((1 - kappa) * gamma(shape1)) *
(
(rate^(1/shape2)) *
gamma(1 + 1/shape2) *
gamma(shape1 - 1/shape2) *
pbeta(q = (vark^shape2)/(rate + vark^shape2),
shape1 = 1 + 1/shape2,
shape2 = shape1 - 1/shape2,
lower.tail = F)
)
}
TVaR_burr(kappa = 1, rate = 2, shape1 = 2, shape2 = 5)
TVaR_burr(kappa = 1, scale = 0.5, shape1 = 2, shape2 = 5)
TVaR_burr(kappa = .8, rate = 2, shape1 = 2, shape2 = 5)
TVaR_burr(kappa = .8, scale = 0.5, shape1 = 2, shape2 = 5)
library(actuar)
library(Distributacalcul)
library(Distributacalcul)
devtools::build_manual()
#'
#' # Where k is the number of trials for a rth success
#' E_negbinom(r = 2, p = .4)
#'
#' # Where k is the number of failures before a rth success
#' E_negbinom(r = 2, p = .4, nb_tries = T)
#'
#' # With alternative parameterization where k is the number of trials
#' E_negbinom(r = 2, beta = 1.5)
#'
E_negbinom <- function(r, p = (1 / (1 + beta)), beta = ((1 - p) / p), nb_tries = F)
{
if (nb_tries) {
r / p
} else {
r * ((1 - p) / p)
}
}
E_negbinom(r = 2, p = .4)
E_negbinom(r = 2, p = .4, nb_tries = T)
E_negbinom(r = 2, beta = 1.5)
dpareto
library(actuar)
dpareto
devtools::build_manual()
devtools::build_manual(pkg = "Distributacalcul", path = NULL)
library(Distributacalcul)
library(Distributacalcul)
devtools::build_manual(pkg = "Distributacalcul", path = NULL)
devtools::build_manual(pkg = "Distributacalcul", path = NULL)
devtools::build_manual(pkg = "Distributacalcul", path = NULL)
devtools::build_manual("Distributacalcul")
devtools::build_manual(Distributacalcul)
devtools::build_manual()
library(Distributacalcul)
devtools::build_manual()
library(Distributacalcul)
devtools::build_manual()
library(Distributacalcul)
devtools::build_manual()
library(Distributacalcul)
devtools::build_manual()
devtools::build_manual()
library(tvarPackage)
library(Distributacalcul)
#'
#' # With scale parameter
#' dunifD(x = 2, min = 2, max = 5)
#'
#' Densité d'une loi uniforme discrète
#' @param x x n'a aucun impact pour une loi uniforme par définition
#' @param a borne inférieur
#' @param b borne supérieur
#' @details loi uniforme discrète
#' @export
dunifD <- function(x, min, max){
1 / (max - min + 1)
}
dunifD(x = 2, min = 2, max = 5)
dunif
C_dunif
library(Distributacalcul)
library(Distributacalcul)
#' @templateVar kappa FALSE
#' @template discrete-uniform-template
#'
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' dunifD(x = 2, min = 2, max = 5)
#'
dunifD <- function(x = 1, min, max){
1 / (max - min + 1)
}
dunifD(x = 2, min = 2, max = 5)
E_unifD(min = 2, max = 5)
punifD(q = 2, min = 2, max = 5)
punifD(q = 4, min = 2, max = 5)
punifD(q = 3, min = 2, max = 5)
punifD(q = 2, min = 2, max = 5)
V_unifD(min = 2, max = 5)
library(Distributacalcul)
devtools::build_manual()
library(Distributacalcul)
library(Distributacalcul)
Etronq_llogis(d = 2, shape = 2, scale = 5)
Etronq_llogis(d = 2, shape = 2, rate = 0.2)
Elim_llogis(d = 2, shape = 2, scale = 5)
Elim_llogis(d = 2, shape = 2, rate = 0.2)
kthmoment_llogis(d = 2, shape = 2, scale = 5)
kthmoment_llogis(k = 2, shape = 2, scale = 5)
kthmoment_llogis(k = 2, shape = 2, rate = 0.2)
mllogis(order = 2, shape = 2, rate = .2)
kthmoment_llogis(k = 2, shape = 3, scale = 5)
mllogis(order = 2, shape = 3, rate = .2)
mllogis(order = 2, shape = 3, rate = .2)
kthmoment_llogis(k = 2, shape = 3, scale = 5)
kthmoment_llogis(k = 2, shape = 3, scale = .2)
kthmoment_llogis(k = 2, shape = 3, rate = 0.2)
mllogis(order = 2, shape = 3, scale = .2)
library(Distributacalcul)
mllogis(order = 2, shape = 3, scale = .2)
kthmoment_llogis(k = 2, shape = 3, scale = .2)
Mexcess_llogis(d = 2, shape = 3, scale = 5)
Mexcess_llogis(d = 2, shape = 3, rate = 0.2)
mllogis(order = 2, shape = 3, scale = .2) - mllogis(order = 1, shape = 3, scale = .2)^2
V_llogis(shape = 3, scale = 5)
V_llogis(shape = 3, scale = 0.2)
V_llogis(shape = 3, scale = 5)
V_llogis(shape = 3, scale = 5)
mllogis(order = 2, shape = 3, scale = 5) - mllogis(order = 1, shape = 3, scale = 5)^2
kthmoment_llogis(k = 2, shape = 3, scale = 5)
mllogis(order = 2, shape = 3, scale = 5)
kthmoment_llogis(k = 1, shape = 3, scale = 5)
mllogis(order = 1, shape = 3, scale = 5)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' V_llogis(shape = 3, scale = 5)
#'
#' # With rate parameter
#' V_llogis(shape = 3, rate = 0.2)
#'
V_llogis <- function(shape, rate = 1/scale, scale = 1/rate)
{
(kthmoment_llogis(k = 2, shape, scale) - (kthmoment_llogis(k = 1, shape, scale)^2))
}
V_llogis(shape = 3, scale = 5)
mllogis(order = 2, shape = 3, scale = 5) - mllogis(order = 1, shape = 3, scale = 5)^2
V_llogis(shape = 3, scale = .2)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' V_llogis(shape = 3, scale = 5)
#'
#' # With rate parameter
#' V_llogis(shape = 3, rate = 0.2)
#'
V_llogis <- function(shape, rate = 1/scale, scale = 1/rate)
{
(kthmoment_llogis(k = 2, shape, rate) - (kthmoment_llogis(k = 1, shape, rate)^2))
}
V_llogis(shape = 3, scale = 5)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
devtools::build_manual()
devtools::build_manual()
library(Distributacalcul)
devtools::build_manual()
data("AirPassengers")
AirPassengers
library(ggplot2)
data("AirPassengers")
data("economics")
economics
ggplot(data = economics,
aes(x = pop))
ggplot(data = economics,
aes(x = pop)) +
geom_histogram(bins = 20)
ggplot(data = economics,
aes(x = pop)) +
geom_histogram(bins = 30)
ggplot(data = economics,
aes(x = pop)) +
geom_histogram(bins = 10)
ggplot(data = economics,
aes(x = pop)) +
geom_histogram(bins = 30)
ggplot(data = economics,
aes(x = pop)) +
geom_histogram(bins = 50)
ggplot(data = economics,
aes(x = pop)) +
geom_histogram(bins = 40)
ggplot(data = economics,
aes(x = pop)) +
geom_histogram(bins = 40)
economics
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 40)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 30)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 50)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 70)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 50)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 40)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 30)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 10)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20) +
scale_x_continuous()
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20) +
scale_color_continuous()
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20) +
scale_color_continuous(low = "green", high = "teal")
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20) +
scale_color_continuous(low = "green", high = "cyan")
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20) +
scale_color_continuous(low = "green", high = "blue")
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20,
colour = "blue")
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20,
fill = "blue")
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20,
fill = "grey")
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20,
fill = "gray")
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20,
fill = unemploy)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20,
fill = economics$unemploy)
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20,
fill = "gray")
ggplot(data = economics,
aes(x = unemploy)) +
geom_histogram(bins = 20,
fill = "gray") +
scale_color_grey()
library(Distributacalcul)
library(Distributacalcul)
