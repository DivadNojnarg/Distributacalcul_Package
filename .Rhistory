summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
names(test)[1]
!!sym(names(test)[1])
!!sym(names(test)[1]) != 5
!!sym(names(test)[1]) != 5
!!sym(names(test)[1]) != 5
rgamma(n = 2, shape = 2, !!sym(names(test)[1]) != 5)
rgamma(n = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, rate= 1/5)
dgamma(x = 2, shape = 2, rate= 1/5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
names(test)[1]
dgamma(x = 2, shape = 2, rate= 0)
dgamma(x = 2, shape = 2, rate= 0)
dgamma(x = 2, shape = 2, rate= 1)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, rate= 1)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) = 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) == 5)
dgamma(x = 2, shape = 2, rate= 0)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) = 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) := 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) := 5)
eval(expr(dgamma(x = 2, shape = 2, !!sym(names(test)[1]) := 5)))
enquos(dgamma(x = 2, shape = 2, !!sym(names(test)[1]) := 5))
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
dgamma(x = 2, shape = 2, rate= 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
dgamma(x = 2, shape = 2, rate= 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
test <- list("rate" = 2, "shape" = 4, "prob" = 5)
expr(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
exec(.fn = dgamma, expr(shape = 2))
test
exec(dgamma, x = 2, list(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
exec(dgamma, x = 2, quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
exec(dgamma, x = 2, quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
exec(dgamma, x = 2, quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
do.call(what = dgamma, args = list(!!sym(names(test)[1]) := 5))
do.call(what = dgamma, args = list(x = 1))
do.call(what = dgamma, args = list(x = 1), quote = T)
do.call(what = dgamma, args = list(x = 1, !!sym(names(test)[1]) := 5), quote = T)
!!sym(names(test)[1]) := 5
expr(!!sym(names(test)[1]) := 5)
quoo(!!sym(names(test)[1]) := 5)
quo(!!sym(names(test)[1]) := 5)
quo(!!sym(names(test)[1]) := 5)
expr(!!sym(names(test)[1]) := 5)
do.call(what = dgamma, args = list(expr(!!sym(names(test)[1]) := 5)), quote = T)
do.call(what = dgamma, args = list(x=1,shape=2expr(!!sym(names(test)[1]) := 5)), quote = T)
do.call(what = dgamma, args = list(x=1,shape=2,expr(!!sym(names(test)[1]) := 5)), quote = T)
do.call(what = dgamma, args = list(x=1,shape=2,expr(!!sym(names(test)[1]) := 5)), quote = T)
exec(dgamma, x = 2, quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
exec(dgamma, x = 2, quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
exec(dgamma, x = 2, !!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
!!sym(names(test)[1])
sym(names(test)[1])
exec(dgamma, x = 2, !!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
exec(dgamma, x = 2, !!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
exec(dgamma, x = 2, !!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
muFuun(x = 1, y = 2, shape = 4, rate = 10, prob = 0.10)
muFuun <- function(...) {
args <- list(...)
names(args)
}
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10) %in% names(formals(fun = pgamma))
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10) %in% names(formals(fun = dgamma))
names(formals(fun = dgamma)
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10) %in% names(formals(fun = dgamma))
names(formals(fun = dgamma))
names(formals(fun = dgamma))
inner_join(x = muFuun(x = 1, shape = 4, rate = 10, prob = 0.10), names(formals(fun = dgamma)))
as.data.frame(names(formals(fun = dgamma)))
inner_join(x = as.data.frame("arg" = muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)), as.data.frame("arg" = names(formals(fun = dgamma))))
muFuun <- function(...) {
args <- list(...)
names(args)
}
inner_join(x = as.data.frame("arg" = muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)), as.data.frame("arg" = names(formals(fun = dgamma))))
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
inner_join(x = as.data.frame(x = muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)), as.data.frame(x = names(formals(fun = dgamma))))
inner_join(x = data.frame("name" = muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)), data.frame("name" = names(formals(fun = dgamma))))
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
vector_names_muFuun <- muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
vector_names_dgamma <- names(formals(fun = dgamma))
vector_names_dgamma
inner_join(x = data.frame("name" = vector_names_muFuun), data.frame("name" = vector_names_dgamma))
inner_join(x = data.frame("name" = vector_names_muFuun), data.frame("name" = vector_names_dgamma))
common_names <- inner_join(x = data.frame("name" = vector_names_muFuun), data.frame("name" = vector_names_dgamma))
common_names
common_names[1]
common_names[,1]
common_names[1,]
common_names[2,]
length(common_names)
expr_print(x = dgamma)
exec(dgamma, x = 2, !!sym(common_names[1,]) := 2, !!sym(common_names[2,]) := 5)
length(common_names)
common_names
nrow(common_names)
parse_character(common_names)
common_names
common_names[,1]
parse_character(common_names[,1])
parse_character(common_names[,1])
expr1<-parse(text=paste(paste0("X",1:2),collapse="+"))
expr1
paste0("X",1:2)
paste(paste0("X",1:2),collapse="+")
parse(text=paste(paste0("X",1:2),collapse="+"))
eval(expr1)
parse_character
paste(parse_character)
parse_character
paste( common_names[,1])
vector_names_muFuun
vector_names_dgamma
vector_names_muFuun
muFuun <- function(...) {
args <- list(...)
names(args)
args
}
vector_names_muFuun <- muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
vector_names_muFuun
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))[2,]
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))
dim(unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)))
nrow(unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)))
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))[1]
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))[,1]
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))[1,]
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
eval(expr1)
paste(common_names[,1])
paste(common_names[,1], vector_values_muFuun, sep = "=")
vector_values_muFuun <- muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
paste(common_names[,1], vector_values_muFuun, sep = "=")
common_names
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]]
paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=")
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=")
parse(paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "="))
paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=;")
paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")
parse(paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";"))
parse(text = paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";"))
eval(parse(text = paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")))
exec(dgamma, x = 2, parse(text = paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")))
paste0("dgamma", paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")))
paste0("dgamma",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ";")
)
parse(text = paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ";"),
collapse = ")"
))
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ";"),
collapse = ")"
)
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ","),
collapse = ")"
)
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ","),")"
collapse = ")"
)
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ","),")"
)
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ","),")"
)
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
)
expr(paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
eval(paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
eval(expr(paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
)))
exec(paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
parse(paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
parse(text = paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
dgam.paste <- parse(text = paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
eval(dgam.paste)
eval(dgam.paste)
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]]
eval(parse(text = paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")))
eval(parse(text = paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")))
common_values_list <- vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]]
common_values_list
dgam.paste <- parse(text = paste0("dgamma(",
paste(common_names[,1],
common_values_list,
sep = " = ", collapse = ", "),")"
))
eval(dgam.paste)
common_values_list
common_values_list$x
dgamma(x = common_values_list$x, shape = common_values_list$shape, rate= common_values_list$rate)
eval(dgam.paste)
dgamma(
x = common_values_list$x,
shape = common_values_list$shape,
rate = common_values_list$rate
)
eval(dgam.paste)
#### HERE ####
muFuun <- function(...) {
args <- list(...)
names(args)
args
}
vector_names_muFuun <- names(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
names(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))
vector_names_muFuun <- names(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))
vector_names_muFuun
vector_values_muFuun <- muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
vector_values_muFuun
names(vector_values_muFuun)
vector_names_dgamma <- names(formals(fun = dgamma))
vector_names_dgamma
vector_names_muFuun
common_names <- inner_join(x = data.frame("name" = names(vector_values_muFuun)), data.frame("name" = vector_names_dgamma))
common_names
common_names
common_names
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]]
vector_values_muFuun
names(vector_values_muFuun)
names(vector_values_muFuun)
names(vector_values_muFuun)
names(vector_values_muFuun)
names(vector_values_muFuun)
names(vector_values_muFuun)
names(vector_values_muFuun)
vector_values_muFuun
vector_values_muFuun
common_names
common_names[,1]
names(vector_values_muFuun) %in% common_names[,1]
common_values_list <- vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]]
common_values_list
vector_values_muFuun
vector_names_dgamma
purrr::pluck(.x = vector_values_muFuun, vector_names_dgamma)
vector_values_muFuun
purrr::pluck(.x = names(vector_values_muFuun), vector_names_dgamma)
vector_names_dgamma
vector_values_muFuun <- muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
vector_names_dgamma <- names(formals(fun = dgamma))
common_names <- inner_join(x = data.frame("name" = names(vector_values_muFuun)), data.frame("name" = vector_names_dgamma))
common_names
common_values_list <- vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]]
common_values_list
dgam.paste <- parse(text = paste0("dgamma(",
paste(common_names[,1],
common_values_list,
sep = " = ", collapse = ", "),")"
))
dgam.paste <- parse(text = paste0("dgamma(",
paste(common_names[,1],
common_values_list,
sep = " = ", collapse = ", "),")"
))
dgam.paste
eval(dgam.paste)
eval(dgam.paste)
eval(dgam.paste)
eval(dgam.paste)
library(Distributacalcul)
formals(fun = kthmoment_gamma)
names(formals(fun = kthmoment_gamma))
E_BNCOMP <- function(size, prob, distr_severity = "Gamma", ...) {
stopifnot(prob >= 0, prob <= 1)
stopifnot(grepl(pattern = "(^Gamma$)|(^Lognormal[e]*$)", x = distr_severity, ignore.case = TRUE))
args <- list(...)
if (grepl(pattern = "^Gamma$", x = distr_severity, ignore.case = TRUE)) {
if (missing(rate)) { # checks if user specified rate
rate <- 1 / scale
}
stopifnot(shape > 0, rate > 0)
gamm_fun_params <- names(formals(fun = kthmoment_gamma))
gamm_usr_args <- inner_join(x = data.frame("name" = names(stopifnot)), data.frame("name" = gamma_params))
gamm_usr_val <- args[names(args) %in% gamm_args[,1]]
dgam.paste <- parse(text = paste0("kthmoment_gamma(k = 1,",
paste(common_names[,1],
common_values_list,
sep = " = ", collapse = ", "),")"
))
E.NBCOMP <- E_negbinom(size, prob, nb_tries = FALSE) * eval(dgam.paste)
} else if (grepl(pattern = "^Lognormal[e]*$", x = distr_severity, ignore.case = TRUE)) {
E.NBCOMP <- E_negbinom(size, prob, nb_tries = FALSE) * E_lnorm(shape, sqrt(rate))
} else {
stop("Please enter a valid distribution choice. Either 'Lognormal' or 'Gamma'")
}
return(E.NBCOMP)
}
dunif(x = 2, min = 0, max = 5)
dunif(x = 2, min = 1, max = 4)
dbeta(x = 3, shape1 = 1, shape2 = 4)
dbeta(x =. 3, shape1 = 1, shape2 = 4)
dbeta(x =.3, shape1 = 1, shape2 = 4)
1%%1
sym(q)
sym("q")
library(Distributacalcul)
install()
check()
enquote(x)
enquote(È)
enquote("q")
check()
exists("q")
exists("q", inherits = F)
q <- 2
exists("q", inherits = F)
rm(list = ls())
exists("q", inherits = F)
check()
check()
check()
VaR_gamma
gamma(0)
gamma(1)
gamma(.5)
gamma(.2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/E_erlang.R', echo=TRUE)
E_erlang(shape = 2, scale = 5)
E_erlang(shape = 2, rate = 0.2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/V_erlang.R', echo=TRUE)
V_erlang(shape = 2, scale = 5)
V_erlang(shape = 2, rate = 0.2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/derlang.R', echo=TRUE)
derlang(x = 2, shape = 2, rate = 0.2)
derlang(x = 2, shape = 2, scale = 5)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/perlang.R', echo=TRUE)
perlang(q = 2, shape = 2, scale = 5)
perlang(q = 2, shape = 2, rate = 0.2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/Etronq_erlang.R', echo=TRUE)
Etronq_erlang(d = 2, shape = 2, scale = 5)
Etronq_erlang(d = 2, shape = 2, rate = 0.2)
Etronq_erlang(d = 2, shape = 2, rate = 0.2, less.than.d = FALSE)
E_erlang(shape=2, rate=0.2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/kthmoment_erlang.R', echo=TRUE)
kthmoment_erlang(k = 2, shape = 2, scale = 5)
kthmoment_erlang(k = 2, shape = 2, rate = 0.2)
kthmoment_erlang(k = 1, shape = 2, rate = 0.2)
kthmoment_erlang(k = 0, shape = 2, rate = 0.2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/Elim_erlang.R', echo=TRUE)
Elim_erlang(d = 2, shape = 2, scale = 5)
Elim_erlang(d = 2, shape = 2, rate = 0.2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/SL_erlang.R', echo=TRUE)
SL_erlang(d = 2, shape = 2, scale = 5)
SL_erlang(d = 2, shape = 2, rate = 0.2)
qgamma
VaR_gamma
qgamma(p = 1, shape = 2, rate = 2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/VaR_erlang.R', echo=TRUE)
VaR_erlang(kap = .2, shape = 3, scale = 4)
VaR_erlang(kap = .2, shape = 3, rate = 0.25)
vark <- stats::qgamma(p = kap, shape = shape, rate = rate)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/TVaR_erlang.R', echo=TRUE)
TVaR_erlang(kap = .2, shape = 3, scale = 4)
TVaR_erlang(kap = .2, shape = 3, rate = 0.25)
qbeta(p = 1)
qbeta(p = 1, shape1 = 1, shape2 = 2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/VaR_beta.R', echo=TRUE)
VaR_beta(kap = .99, shape1 = 4, shape2 = 5)
qbinom(p = 1, size = 2, prob = 0.4)
qbinom(p = 0, size = 2, prob = 0.4)
qbinom(p = 0, size = -2, prob = 0.4)
library(Distributacalcul)
rm(list = ls())
install()
check()
size=10
prob=0.5
k <- 0:size
k
fx <- stats::dbinom(x = k, size, prob)
fx
vark <- stats::qbinom(p = kap, size, prob)
vark
kap=0.99
vark <- stats::qbinom(p = kap, size, prob)
vark
stats::pbinom(q = vark, size = size, prob = prob)
(stats::pbinom(q = vark, size = size, prob = prob) - kap)
vark * (stats::pbinom(q = vark, size = size, prob = prob) - kap)
Etronq_binom(d = vark, size, prob, less.than.d = FALSE) +
vark * (stats::pbinom(q = vark, size = size, prob = prob) - kap))
Etronq_binom(d = vark, size, prob, less.than.d = FALSE) +
vark * (stats::pbinom(q = vark, size = size, prob = prob) - kap)
(
Etronq_binom(d = vark, size, prob, less.than.d = FALSE) +
vark * (stats::pbinom(q = vark, size = size, prob = prob) - kap)
) / (1 - kap)
VaR_binom
qbinom
k <- 0:size
fx <- stats::dbinom(x = k, size, prob)
fx
k
k
