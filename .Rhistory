min <- enquo(min)
args <- enquos(...)
runif(n = x, !!min, !!!args)
}
muFuun(x = 1, min = 0, max = 2)
muFuun(x = 1, y = 2, shape = 4, rate = 10, prob = 0.10) %in% names(formals(fun = pgamma))
muFuun <- function(x, min, ...) {
args <- list(...)
names(args)
}
muFuun(x = 1, y = 2, shape = 4, rate = 10, prob = 0.10) %in% names(formals(fun = pgamma))
# Multiple arg ------------------------------------------------------------
group_mean <- function(data, var, ...) {
require(dplyr)
var <- rlang::enquo(var)
group_vars <- rlang::enquos(...)
data %>%
group_by(!!!group_vars) %>%
summarise(mean = mean(!!var))
}
group_mean(data = View("USArrests"))
View(USArrests)
group_mean(data = USArrests, var = Murder, Assault)
group_mean <- function(distr, var, ...) {
var <- rlang::enquo(var)
group_vars <- rlang::enquos(...)
# data %>%
#     group_by(!!!group_vars) %>%
#     summarise(mean = mean(!!var))
rlang::exec(.fn = paste0("d", distr), x = x, shape = 2, rate = !!!group_vars...)
}
group_mean(distr = "gamma", x = 4, 5)
group_mean <- function(x, distr, var, ...) {
var <- rlang::enquo(var)
group_vars <- rlang::enquos(...)
# data %>%
#     group_by(!!!group_vars) %>%
#     summarise(mean = mean(!!var))
rlang::exec(.fn = paste0("d", distr), x = x, shape = 2, rate = !!!group_vars...)
}
group_mean(distr = "gamma", x = 4, 5)
group_mean <- function(x, distr, var, ...) {
var <- rlang::enquo(var)
group_vars <- rlang::enquos(...)
# data %>%
#     group_by(!!!group_vars) %>%
#     summarise(mean = mean(!!var))
rlang::exec(.fn = paste0("d", distr), x = x, shape = 2, rate = !!!group_vars, ...)
}
group_mean(distr = "gamma", x = 4, 5)
group_mean <- function(x, distr, var, ...) {
var <- rlang::enquo(var)
group_vars <- rlang::enquos(...)
# data %>%
#     group_by(!!!group_vars) %>%
#     summarise(mean = mean(!!var))
rlang::exec(.fn = paste0("d", distr), x = x, shape = 2, !!!group_vars = 5, ...)
}
group_mean(distr = "gamma", x = 4, 5)
ast(shape = 4)
ast(shape = 4)
ast(shape <- 4)
sym("shape")
sym("shape")=2
rgamma(n = 2, rate = 2, sym("shape")=2)
expr(sym("shape")=2)
expr(shape=2)
expr(shape=2)
expr(shape=2)
expr(shape=2)
expr(shape=2)
expr(shape=2)
rgamma(n = 2, rate = 2, expr(sym("shape"=2)=2))
sym("shape = 2")
expr(sym("shape = 2"))
rgamma(n = 2, rate = 2, expr(sym("shape = 2")))
rgamma(n = 2, rate = 2, sym("shape = 2"))
rgamma(n = 2, rate = 2, sym("shape = 2"))
sym("shape = 2")
expr("shape = 2")
rgamma(n = 2, rate = 2, expr("shape = 2"))
call2(.fn = rgamma, x = 1, sym('shape') = 3, rate = 4)
call2(.fn = rgamma, x = 1, rate = 4)
call2(.fn = rgamma, x = 1, sym('shape=3'), rate = 4)
eval(call2(.fn = rgamma, x = 1, sym('shape=3'), rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape=3'), rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape'=3), rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
eval(call2(.fn = rgamma, n = 1, sym('shape')=3, rate = 4))
call2(.fn = rgamma, x = 1, sym('shape=3'), rate = 4)
call2(.fn = rgamma, x = 1, sym('shape=3'), rate = 4)
call2(.fn = rgamma, x = 1, sym('shape=3'), rate = 4)
call2(.fn = "=", sym("shape"), 4)
call2(.fn = "=", sym("shape"), 4)
rgamma(call2(.fn = "=", sym("shape"), 4))
rgamma(n = 2, rate = 2, call2(.fn = "=", sym("shape"), 4))
call2(.fn = "=", sym("shape"), 4)
rgamma(n = 2, rate = 2, call2(.fn = "=", sym("shape"), 4))
rgamma(n = 2, rate = 2, call2(.fn = "=", sym("shape"), 4))
rgamma(n = 2, rate = 2, call2(.fn = "=", sym("shape"), 4))
rgamma(n = 2, rate = 2, call2(.fn = "=", sym("shape"), 4))
rgamma(n = 2, rate = 2, call2(.fn = "=", sym("shape"), 4))
rgamma(n = 2, rate = 2, call2(.fn = "=", sym("shape"), 4))
rgamma(n = 2, rate = 2, call2(.fn = "=", sym("shape"), 4))
rgamma(n = 2, rate = 2, call2(.fn = "=", sym("shape"), 4))
rgamma(n = 2, rate = 2, call2(.fn = "=", sym("shape"), 4))
is.expression(rgamma)
expr(rgamma)
expr("rgamma")
expr(rgamma)
switch(EXPR = expr(rgamma), shape = 2, n = 2, rate = 4)
switch(EXPR = "rgamma", shape = 2, n = 2, rate = 4)
switch
switch(EXPR = "rgamma", shape = 2, n = 2, rate = 4)
switch(EXPR = "rgamma", shape = 2, n = 2, rate = 4)
summ.switch.test <- function(x, type) {
switch(EXPR = type,
mean = mean(x),
sd = mean(x),
median = mean(x)
)
}
summ.switch.test(x = runif(n = 5), type = "mean")
summ.switch.test(x = runif(n = 5), type = "sd")
summ.switch.test(x = runif(n = 5), type = "sd")
summ.switch.test(x = runif(n = 5), type = "sd")
summ.switch.test(x = runif(n = 5), type = "sd")
summ.switch.test(x = runif(n = 5), type = "sd")
summ.switch.test <- function(x, type) {
set.seed(2019)
switch(EXPR = type,
mean = mean(x),
sd = mean(x),
median = mean(x)
)
}
summ.switch.test(x = runif(n = 5), type = "sd")
summ.switch.test(x = runif(n = 5), type = "sd")
summ.switch.test(x = runif(n = 5), type = "sd")
summ.switch.test(x = runif(n = 5), type = "mean")
summ.switch.test(x = runif(n = 5), type = "mean")
summ.switch.test(x = runif(n = 5), type = "median")
summ.switch.test(x = runif(n = 5, max = 10), type = "median")
summ.switch.test(x = runif(n = 5, max = 10), type = "median")
summ.switch.test(x = runif(n = 5, max = 10), type = "median")
summ.switch.test(x = runif(n = 5, max = 10), type = "sd")
summ.switch.test(x = runif(n = 5, max = 10), type = "sd")
summ.switch.test(x = runif(n = 5, max = 10), type = mean)
runif(n = 5, max = 10)
summ.switch.test(x = rcauchy(n = 10), type = )
summ.switch.test(x = rcauchy(n = 10), type = "mean")
summ.switch.test(x = rcauchy(n = 10), type = "mean")
summ.switch.test(x = rcauchy(n = 10), type = "mean")
summ.switch.test(x = rcauchy(n = 10), type = "mean")
summ.switch.test(x = rcauchy(n = 10), type = "mean")
summ.switch.test(x = rcauchy(n = 10), type = "sd")
summ.switch.test(x = rcauchy(n = 10), type = "sd")
summ.switch.test(x = rcauchy(n = 10), type = "sd")
summ.switch.test(x = rcauchy(n = 10), type = "sd")
summ.switch.test(x = rcauchy(n = 10), type = "sd")
summ.switch.test(x = rcauchy(n = 10), type = "sd")
summ.switch.test(x = rcauchy(n = 10), type = "sd")
summ.switch.test(x = rcauchy(n = 10), type = "sd")
summ.switch.test(x = rcauchy(n = 10), type = "sd")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
summ.switch.test(x = rcauchy(n = 10), type = "sd
")
names(test)[1]
!!sym(names(test)[1])
!!sym(names(test)[1]) != 5
!!sym(names(test)[1]) != 5
!!sym(names(test)[1]) != 5
rgamma(n = 2, shape = 2, !!sym(names(test)[1]) != 5)
rgamma(n = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, rate= 1/5)
dgamma(x = 2, shape = 2, rate= 1/5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
names(test)[1]
dgamma(x = 2, shape = 2, rate= 0)
dgamma(x = 2, shape = 2, rate= 0)
dgamma(x = 2, shape = 2, rate= 1)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) != 5)
dgamma(x = 2, shape = 2, rate= 1)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) = 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) == 5)
dgamma(x = 2, shape = 2, rate= 0)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) = 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) := 5)
dgamma(x = 2, shape = 2, !!sym(names(test)[1]) := 5)
eval(expr(dgamma(x = 2, shape = 2, !!sym(names(test)[1]) := 5)))
enquos(dgamma(x = 2, shape = 2, !!sym(names(test)[1]) := 5))
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
dgamma(x = 2, shape = 2, rate= 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
dgamma(x = 2, shape = 2, rate= 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
test <- list("rate" = 2, "shape" = 4, "prob" = 5)
expr(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
exec(dgamma, x = 2, shape = 2, !!sym(names(test)[1]) := 5)
exec(.fn = dgamma, expr(shape = 2))
test
exec(dgamma, x = 2, list(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
exec(dgamma, x = 2, quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
exec(dgamma, x = 2, quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
exec(dgamma, x = 2, quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
do.call(what = dgamma, args = list(!!sym(names(test)[1]) := 5))
do.call(what = dgamma, args = list(x = 1))
do.call(what = dgamma, args = list(x = 1), quote = T)
do.call(what = dgamma, args = list(x = 1, !!sym(names(test)[1]) := 5), quote = T)
!!sym(names(test)[1]) := 5
expr(!!sym(names(test)[1]) := 5)
quoo(!!sym(names(test)[1]) := 5)
quo(!!sym(names(test)[1]) := 5)
quo(!!sym(names(test)[1]) := 5)
expr(!!sym(names(test)[1]) := 5)
do.call(what = dgamma, args = list(expr(!!sym(names(test)[1]) := 5)), quote = T)
do.call(what = dgamma, args = list(x=1,shape=2expr(!!sym(names(test)[1]) := 5)), quote = T)
do.call(what = dgamma, args = list(x=1,shape=2,expr(!!sym(names(test)[1]) := 5)), quote = T)
do.call(what = dgamma, args = list(x=1,shape=2,expr(!!sym(names(test)[1]) := 5)), quote = T)
exec(dgamma, x = 2, quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
exec(dgamma, x = 2, quo(!!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2))
exec(dgamma, x = 2, !!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
!!sym(names(test)[1])
sym(names(test)[1])
exec(dgamma, x = 2, !!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
exec(dgamma, x = 2, !!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
exec(dgamma, x = 2, !!sym(names(test)[1]) := 5, !!sym(names(test)[2]) := 2)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
dgamma(x = 2, shape = 2, rate= 5)
muFuun(x = 1, y = 2, shape = 4, rate = 10, prob = 0.10)
muFuun <- function(...) {
args <- list(...)
names(args)
}
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10) %in% names(formals(fun = pgamma))
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10) %in% names(formals(fun = dgamma))
names(formals(fun = dgamma)
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10) %in% names(formals(fun = dgamma))
names(formals(fun = dgamma))
names(formals(fun = dgamma))
inner_join(x = muFuun(x = 1, shape = 4, rate = 10, prob = 0.10), names(formals(fun = dgamma)))
as.data.frame(names(formals(fun = dgamma)))
inner_join(x = as.data.frame("arg" = muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)), as.data.frame("arg" = names(formals(fun = dgamma))))
muFuun <- function(...) {
args <- list(...)
names(args)
}
inner_join(x = as.data.frame("arg" = muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)), as.data.frame("arg" = names(formals(fun = dgamma))))
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
inner_join(x = as.data.frame(x = muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)), as.data.frame(x = names(formals(fun = dgamma))))
inner_join(x = data.frame("name" = muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)), data.frame("name" = names(formals(fun = dgamma))))
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
vector_names_muFuun <- muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
vector_names_dgamma <- names(formals(fun = dgamma))
vector_names_dgamma
inner_join(x = data.frame("name" = vector_names_muFuun), data.frame("name" = vector_names_dgamma))
inner_join(x = data.frame("name" = vector_names_muFuun), data.frame("name" = vector_names_dgamma))
common_names <- inner_join(x = data.frame("name" = vector_names_muFuun), data.frame("name" = vector_names_dgamma))
common_names
common_names[1]
common_names[,1]
common_names[1,]
common_names[2,]
length(common_names)
expr_print(x = dgamma)
exec(dgamma, x = 2, !!sym(common_names[1,]) := 2, !!sym(common_names[2,]) := 5)
length(common_names)
common_names
nrow(common_names)
parse_character(common_names)
common_names
common_names[,1]
parse_character(common_names[,1])
parse_character(common_names[,1])
expr1<-parse(text=paste(paste0("X",1:2),collapse="+"))
expr1
paste0("X",1:2)
paste(paste0("X",1:2),collapse="+")
parse(text=paste(paste0("X",1:2),collapse="+"))
eval(expr1)
parse_character
paste(parse_character)
parse_character
paste( common_names[,1])
vector_names_muFuun
vector_names_dgamma
vector_names_muFuun
muFuun <- function(...) {
args <- list(...)
names(args)
args
}
vector_names_muFuun <- muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
vector_names_muFuun
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))[2,]
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))
dim(unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)))
nrow(unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)))
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))[1]
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))[,1]
unlist(muFuun(x = 1, shape = 4, rate = 10, prob = 0.10))[1,]
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
eval(expr1)
paste(common_names[,1])
paste(common_names[,1], vector_values_muFuun, sep = "=")
vector_values_muFuun <- muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
paste(common_names[,1], vector_values_muFuun, sep = "=")
common_names
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]]
paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=")
muFuun(x = 1, shape = 4, rate = 10, prob = 0.10)
paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=")
parse(paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "="))
paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=;")
paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")
parse(paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";"))
parse(text = paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";"))
eval(parse(text = paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")))
exec(dgamma, x = 2, parse(text = paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")))
paste0("dgamma", paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")))
paste0("dgamma",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ";")
)
parse(text = paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ";"),
collapse = ")"
))
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ";"),
collapse = ")"
)
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ","),
collapse = ")"
)
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ","),")"
collapse = ")"
)
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = "=", collapse = ","),")"
)
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ","),")"
)
paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
)
expr(paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
eval(paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
eval(expr(paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
)))
exec(paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
parse(paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
parse(text = paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
dgam.paste <- parse(text = paste0("dgamma(",
paste(common_names[,1],
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]],
sep = " = ", collapse = ", "),")"
))
eval(dgam.paste)
eval(dgam.paste)
vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]]
eval(parse(text = paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")))
eval(parse(text = paste(common_names[,1], vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]], sep = "=", collapse = ";")))
common_values_list <- vector_values_muFuun[names(vector_values_muFuun) %in% common_names[,1]]
common_values_list
dgam.paste <- parse(text = paste0("dgamma(",
paste(common_names[,1],
common_values_list,
sep = " = ", collapse = ", "),")"
))
eval(dgam.paste)
common_values_list
common_values_list$x
dgamma(x = common_values_list$x, shape = common_values_list$shape, rate= common_values_list$rate)
eval(dgam.paste)
dgamma(
x = common_values_list$x,
shape = common_values_list$shape,
rate = common_values_list$rate
)
eval(dgam.paste)
