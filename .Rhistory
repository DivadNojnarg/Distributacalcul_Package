geom = "area",
fill = "red",
alpha = 0.7
) +
ylab("f(x)") +
theme_classic()
ggplot(data = data.frame(x = c(5, 10)), aes(x)) +
stat_function(
fun = Vectorize(FUN = function(k) pgammaMixture(q = k, shape = shapes, rate = rates)),
) +
stat_function(
fun = Vectorize(FUN = function(k) pgammaMixture(q = k, shape = shapes, rate = rates)),
xlim = c(5, 9),
geom = "area",
fill = "red",
alpha = 0.7
) +
ylab("f(x)") +
theme_classic()
ggplot(data = data.frame(x = c(5, 10)), aes(x))
ggplot(data = data.frame(x = c(5, 10)), aes(x)) +
stat_function(
fun = Vectorize(FUN = function(k) pgammaMixture(q = k, shape = shapes, rate = rates)),
)
ggplot(data = data.frame(x = c(5, 10)), aes(x)) +
stat_function(
fun = Vectorize(FUN = function(k) pgammaMixture(q = k, shape = shapes, rate = rates)),
)
ggplot(data = data.frame(x = c(5, 10)), aes(x)) +
stat_function(
fun = Vectorize(FUN = function(k) dgammaMixture(x = k, shape = shapes, rate = rates)),
) +
stat_function(
fun = Vectorize(FUN = function(k) dgammaMixture(x = k, shape = shapes, rate = rates)),
xlim = c(5, 9),
geom = "area",
fill = "red",
alpha = 0.7
) +
ylab("f(x)") +
theme_classic()
mean=1
sd=2
d=3
phi1 <- (d - mean) / sd
phi1
mean=10
phi1 <- (d - mean) / sd
phi1
mean * stats::pnorm(phi1) -
# sd^2 * stats::dnorm(x = d, mean = mean, sd = sd)
(sd / sqrt(2*pi)) * exp(-phi1^2 / 2)
# (sd / sqrt(2*pi)) * exp(-phi1^2 / 2)
} else {
mean * stats::pnorm(phi1) -
sd^2 * stats::dnorm(x = d, mean = mean, sd = sd)
mean * stats::pnorm(phi1) -
# sd^2 * stats::dnorm(x = d, mean = mean, sd = sd)
(sd / sqrt(2*pi)) * exp(-phi1^2 / 2)
mean * stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 * stats::dnorm(x = d, mean = mean, sd = sd)
mean * stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F) +
sd^2 * stats::dnorm(x = d, mean = mean, sd = sd)
E_lnorm(meanlog, sdlog) * stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog)
meanlog=4
sdlog=3
E_lnorm(meanlog, sdlog) * stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog)
phi1 <- (log(d) - meanlog  - sdlog^2) / sdlog
exp(meanlog  + (sdlog^2) / 2) * stats::pnorm(phi1)
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F)
E_lnorm(meanlog, sdlog)
Etronq_lnorm(d = 2, meanlog = 2, sdlog = 5)
Etronq_norm(d = 2, mean = 2, sd = 5)
#'
#' @param t t.
#' @template norm-template
#'
#' @export
#'
#' @examples
#'
#' MGF_norm(t = 1, shape = 3, rate = 5)
#'
MGF_norm <- function(t, mean = 0, sd = 1) {
stopifnot(sd > 0)
exp(meanlog * t + t^2 * (sdlog^2) / 2)
}
MGF_norm(t = 1, shape = 3, rate = 5)
MGF_norm(t = 1, mean = 3, sd = 5)
kthmoment_lnorm(k = 1, meanlog = 3, sdlog = 5)
install()
MGF_norm(t = 1, mean = 3, sd = 5)
library(Distributacalcul)
MGF_norm(t = 1, mean = 3, sd = 5)
#'
#' @param t t.
#' @template norm-template
#'
#' @export
#'
#' @examples
#'
#' MGF_norm(t = 1, mean = 3, sd = 5)
#'
MGF_norm <- function(t, mean = 0, sd = 1) {
stopifnot(sd > 0)
exp(meanlog * t + t^2 * (sdlog^2) / 2)
}
MGF_norm(t = 1, mean = 3, sd = 5)
exp(mean * t + t^2 * (sd^2) / 2)
#'
#' @param t t.
#' @template norm-template
#'
#' @export
#'
#' @examples
#'
#' MGF_norm(t = 1, mean = 3, sd = 5)
#'
MGF_norm <- function(t, mean = 0, sd = 1) {
stopifnot(sd > 0)
exp(mean * t + t^2 * (sd^2) / 2)
}
MGF_norm(t = 1, mean = 3, sd = 5)
mean = 0
sd = 1
mean = 2
sd = 5
d = 2
Mexcess_norm(d = 2, mean = 2, sd = 5)
mean +
d -
(sd^2) * stats::dnorm(x = d, mean = mean, sd = sd)
mean +
d -
(sd^2) *
stats::dnorm(x = d, mean = mean, sd = sd) /
pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
mean +
d -
(sd^2) *
stats::dnorm(x = d, mean = mean, sd = sd) /
pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
d = 2
meanlog = 2
sdlog = 5
) *
stats::pnorm(q = l
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = mean, sd = sd, lower.tail = F) /
stats::pnorm(q = log(d), mean = mean, sd = sd, lower.tail = F)
Mexcess_lnorm(d = 2, meanlog = 2, sdlog = 5)
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = mean, sd = sd, lower.tail = F) /
stats::pnorm(q = log(d), mean = mean, sd = sd, lower.tail = F) -
d
Mexcess_lnorm(d = 2, meanlog = 2, sdlog = 5)
E_lnorm
d = 2
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F) -
d
Mexcess_lnorm(d = 2, meanlog = 2, sdlog = 5)
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F) -
d
meanlog
sdlog
Mexcess_lnorm(d = 2, meanlog = 2, sdlog = 5)
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F) -
d
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F) -
d
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F) -
d
(E_lnorm(meanlog, sdlog) * stats::pnorm(phi1, lower.tail = F) * stats::pnorm(phi2, lower.tail = F)) -
d
(E_lnorm(meanlog, sdlog) * stats::pnorm(phi1, lower.tail = F) * stats::pnorm(phi2, lower.tail = F)) -
d
phi1 <- (log(d) - meanlog - sdlog^2) / sdlog
phi2 <-  (log(d) - meanlog) / sdlog
(E_lnorm(meanlog, sdlog) * stats::pnorm(phi1, lower.tail = F) * stats::pnorm(phi2, lower.tail = F)) -
d
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F) -
d
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F) -
d
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F) -
d
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F) -
d
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F)
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F) -
d
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) -
d *
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F)
phi1 <- (log(d) - meanlog - sdlog^2) / sdlog
phi2 <-  (log(d) - meanlog) / sdlog
E_lnorm(meanlog, sdlog) *
stats::pnorm(phi1, lower.tail = F) -
d *
stats::pnorm(phi2, lower.tail = F)
mean *
stats::pnorm(q = d, mean = mean, sd = sd) -
sigma^2 * dnorm(x = d, mean = mean, sd = sd) +
# fact_norm +
d *
# stats::pnorm(phi1, lower.tail = F)
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
sigma
sd
d
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
d
stats::pnorm(q = d, mean = mean, sd = sd)
mean *
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
dnorm(x = d, mean = mean, sd = sd) +
# fact_norm +
d *
# stats::pnorm(phi1, lower.tail = F)
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
mean *
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
# dnorm(x = d, mean = mean, sd = sd) +
fact_norm +
d *
stats::pnorm(phi1, lower.tail = F)
fact_norm <- (sd / sqrt(2*pi)) * exp(-phi1^2 / 2)
phi1 <- (d - mean) / sd
mean *
stats::pnorm(phi1)
mean *
stats::pnorm(phi1) -
# stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
# dnorm(x = d, mean = mean, sd = sd) +
fact_norm +
d *
stats::pnorm(phi1, lower.tail = F)
mean *
# stats::pnorm(phi1) -
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
dnorm(x = d, mean = mean, sd = sd) +
# fact_norm +
d *
# stats::pnorm(phi1, lower.tail = F)
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
mean *
stats::pnorm(phi1) -
# stats::pnorm(q = d, mean = mean, sd = sd) -
# sd^2 *
# dnorm(x = d, mean = mean, sd = sd) +
fact_norm +
d *
stats::pnorm(phi1, lower.tail = F)
mean *
# stats::pnorm(phi1) -
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
dnorm(x = d, mean = mean, sd = sd) +
fact_norm +
d *
# stats::pnorm(phi1, lower.tail = F)
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
phi1
phi1 <- (d - mean) / sd
phi1
stats::pnorm(phi1)
stats::pnorm(q = d, mean = mean, sd = sd)
stats::pnorm(phi1)
sd^2 *
dnorm(x = d, mean = mean, sd = sd)
fact_norm
stats::pnorm(phi1, lower.tail = F)
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
mean *
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
dnorm(x = d, mean = mean, sd = sd) +
d *
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
mean *
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
dnorm(x = d, mean = mean, sd = sd) +
d *
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
mean *
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
dnorm(x = d, mean = mean, sd = sd) +
d *
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
mean *
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
dnorm(x = d, mean = mean, sd = sd) +
d *
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
mean *
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
dnorm(x = d, mean = mean, sd = sd) +
d *
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
mean *
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
dnorm(x = d, mean = mean, sd = sd) +
d *
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
mean *
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
dnorm(x = d, mean = mean, sd = sd) +
d *
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
Elim_norm(d = 2, mean = 2, sd = 5)
#'
#' @templateVar d TRUE
#' @template norm-template
#'
#' @export
#'
#' @examples
#'
#' Elim_norm(d = 2, mean = 2, sd = 5)
#'
Elim_norm <- function(d, mean = 0, sd = 1) {
stopifnot(sd > 0)
mean *
stats::pnorm(q = d, mean = mean, sd = sd) -
sd^2 *
dnorm(x = d, mean = mean, sd = sd) +
d *
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F)
}
Elim_norm(d = 2, mean = 2, sd = 5)
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog) +
d *
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F)
Elim_lnorm(d = 2, meanlog = 2, sdlog = 5)
(mean + d) *
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F) -
(sd^2) *
stats::dnorm(x = d, mean = mean, sd = sd)
SL_norm(d = 2, mean = 2, sd = 5)
#' @templateVar d TRUE
#' @template norm-template
#'
#' @export
#' @importFrom stats pnorm
#'
#' @examples
#'
#' SL_norm(d = 2, mean = 2, sd = 5)
#'
SL_norm <- function(d, mean = 0, sd = 1) {
stopifnot(sd > 0)
(mean + d) *
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F) -
(sd^2) *
stats::dnorm(x = d, mean = mean, sd = sd)
}
SL_norm(d = 2, mean = 2, sd = 5)
(mean + d) *
stats::pnorm(q = d, mean = mean, sd = sd, lower.tail = F) -
(sd^2) *
stats::dnorm(x = d, mean = mean, sd = sd)
SL_norm(d = 2, mean = 2, sd = 5)
mean +
(sd^3) *
stats::dnorm(x = stats::qnorm(p = kap, mean = mean, sd = sd)) /
(1 - kap)
kap=0.8
mean
sd
TVaR_norm(kap = 0.8, mean = 2, sd = 5)
mean +
(sd^3) *
stats::dnorm(x = stats::qnorm(p = kap, mean = mean, sd = sd)) /
(1 - kap)
mean +
(sd^2) *
stats::dnorm(x = stats::qnorm(p = kap, mean = mean, sd = sd)) /
(1 - kap)
#' @templateVar kap TRUE
#' @template norm-template
#'
#' @export
#' @importFrom stats qnorm dnorm
#'
#' @examples
#'
#' TVaR_norm(kap = 0.8, mean = 2, sd = 5)
#'
TVaR_norm <- function(kap, mean = 0, sd = 1) {
stopifnot(kap >= 0, kap <= 1, sd > 0)
mean +
(sd^2) *
stats::dnorm(x = stats::qnorm(p = kap, mean = mean, sd = sd)) /
(1 - kap)
}
TVaR_norm(kap = 0.8, mean = 2, sd = 5)
phi <- stats::qnorm(kap) - sdlog
(E_lnorm(meanlog, sdlog) * stats::pnorm(phi, lower.tail = F)) / (1 - kap)
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = stats::qnorm(p = kap) - sdlog, lower.tail = F) /
(1 - kap)
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = stats::qnorm(p = kap) - sdlog, lower.tail = F) /
(1 - kap)
V_lnorm(meanlog = 3, sdlog = 5)
exp(2 * meanlog + (sdlog^2)) *
(exp(sdlog^2) - 1)
#'  \eqn{\mu}{mu} and variance \eqn{\sigma}{sigma}.
#'
#' @template lnorm-template
#'
#' @export
#'
#' @examples
#'
#' V_lnorm(meanlog = 3, sdlog = 5)
#'
V_lnorm <- function(meanlog, sdlog) {
stopifnot(sdlog > 0)
exp(2 * meanlog + (sdlog^2)) *
(exp(sdlog^2) - 1)
}
V_lnorm(meanlog = 3, sdlog = 5)
#' @templateVar d TRUE
#' @template lnorm-template
#'
#' @export
#' @importFrom stats pnorm
#'
#' @examples
#'
#' Mexcess_lnorm(d = 2, meanlog = 2, sdlog = 5)
#'
Mexcess_lnorm <- function(d, meanlog, sdlog) {
stopifnot(d >= 0, sdlog > 0)
E_lnorm(meanlog, sdlog) *
stats::pnorm(q = log(d) - sdlog^2, mean = meanlog, sd = sdlog, lower.tail = F) /
stats::pnorm(q = log(d), mean = meanlog, sd = sdlog, lower.tail = F) -
d
}
Mexcess_lnorm(d = 2, meanlog = 2, sdlog = 5)
library(Distributacalcul)
install()
library(Distributacalcul)
#'  \eqn{\mu}{mu} and variance \eqn{\sigma}{sigma}.
#'
#' @template norm-template
#'
#' @export
#'
#' @examples
#'
#' V_norm(mean = 3, sd = 5)
#'
V_norm <- function(mean, sd) {
stopifnot(sd > 0)
sd^2
}
V_norm(mean = 3, sd = 5)
#'  \eqn{\mu}{mu} and variance \eqn{\sigma}{sigma}.
#'
#' @template norm-template
#'
#' @export
#'
#' @examples
#'
#' E_norm(mean = 3, sd = 5)
#'
E_norm <- function(mean, sd) {
stopifnot(sd > 0)
mean
}
E_norm(mean = 3, sd = 5)
library(Distributacalcul)
