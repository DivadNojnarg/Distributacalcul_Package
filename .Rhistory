}
d_negbinom(k = 3, r = 2, p = .4)
d_negbinom(k = 3, r = 2, p = .4, nb_tries = TRUE)
d_negbinom(k = 3, r = 2, p = .4, nb_tries = TRUE)
d_negbinom(k = 3, r = 2, p = .4, nb_tries = TRUE)
d_negbinom(k = 1, r = 2, p = .4, nb_tries = TRUE)
# With alternative parameterization where k is the number of trials
d_negbinom(k = 3, r = 2, beta = 1.5)
p_negbinom(k = 3, r = 2, p = .4, nb_tries = TRUE)
library(Distributacalcul)
library(Distributacalcul)
TVaR_pois()
TVaR_pois
#'
#' @templateVar q FALSE
#' @template pois-template
#'
#' @export
#'
#' @examples
#'
#' TVaR_pois(kappa = 0.8, lambda = 3, k0 = 2E2)
#'
TVaR_pois <- function(kappa, lambda, k0) {
k <- 0:k0 # valeurs possibles
fx <- dpois(x = k, lambda = lambda)
vark <- qpois(p = kappa, lambda = lambda)
TVaR.approx <- (
Etronq_pois(vark, lambda, k0, less.than.d = F) +
vark * (ppois(q = vark, lambda = lambda) - kappa)
) / (1 - kappa)
# message("This is an approximation") already returned by Etronq_pois
return(TVaR.approx)
}
TVaR_pois(kappa = 0.8, lambda = 3, k0 = 2E2)
TVaR_pois(kappa = 0.8, lambda = 3, k0 = 2E2)
TVaR_pois(kappa = 0.8, lambda = 3, k0 = 2E2)
TVaR_pois(kappa = 0.8, lambda = 3, k0 = 2E2)
library(tidyverse)
as.tibble()
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/E_negbinom.R', echo=TRUE)
E_negbinom
TVaR_binom(kappa = 0.8, size = 5, prob = 0.2)
#'  \eqn{n}{n} and probability of success \eqn{p}{p}.
#'
#' @templateVar q FALSE
#' @template binom-template
#'
#' @examples
#'
#' TVaR_binom(kappa = 0.8, size = 5, prob = 0.2)
#'
#' @export
TVaR_binom <- function(kappa, size, prob)
{
k <- 0:size
fx <- dbinom(k, size, prob)
ValueAtR <- qbinom(kappa, size, prob)
# Définition de la tvar, tout simplement
un      <- sum((k * fx)[k > ValueAtR])
deux    <- ValueAtR * (pbinom(ValueAtR, size, prob) - kappa)
sum (un, deux) / (1-kappa)
}
TVaR_binom(kappa = 0.8, size = 5, prob = 0.2)
E_binom(d = 2, size = 3, prob = 0.5, less.than.d = FALSE)
#' @templateVar q FALSE
#' @templateVar kappa FALSE
#' @template binom-template
#'
#' @examples
#'
#' E_binom(d = 2, size = 3, prob = 0.5, less.than.d = FALSE)
#'
#' @export
#'
E_binom <- function(d, size, prob, less.than.d = TRUE) {
k <- 0:size
fx <- dbinom(x = k, size, prob)
if (less.than.d) {
Etronq.binom <- sum((k * fx)[k <= d])
} else {
Etronq.binom <- sum((k * fx)[k > d])
}
return(Etronq.binom)
}
E_binom(d = 2, size = 3, prob = 0.5, less.than.d = FALSE)
E_binom(d = 0, size = 3, prob = 0.5)
E_binom(d = 0, size = 3, prob = 0.5, less.than.d = FALSE)
E_binom(d = 2, size = 3, prob = 0.5)
Etronq_binom(d = vark, size, prob)
Etronq_binom(d = vark, size, prob)
kappa = 0.8
size = 5
prob = 0.2
k <- 0:size
fx <- dbinom(x = k, size, prob)
vark <- qbinom(p = kappa, size, prob)
sum((k * fx)[k > vark])
Etronq_binom(d = vark, size, prob)
#' @templateVar kappa FALSE
#' @template binom-template
#'
#' @examples
#'
#' Etronq_binom(d = 0, size = 3, prob = 0.5, less.than.d = FALSE)
#' Etronq_binom(d = 2, size = 3, prob = 0.5)
#'
#' @export
#'
Etronq_binom <- function(d, size, prob, less.than.d = TRUE) {
k <- 0:size
fx <- dbinom(x = k, size, prob)
if (less.than.d) {
Etronq.binom <- sum((k * fx)[k <= d])
} else {
Etronq.binom <- sum((k * fx)[k > d])
}
return(Etronq.binom)
}
Etronq_binom(d = vark, size, prob)
sum((k * fx)[k > vark])
Etronq_binom(d = vark, size, prob, less.than.d = FALSE)
sum((k * fx)[k > vark])
#'  \eqn{n}{n} and probability of success \eqn{p}{p}.
#'
#' @templateVar q FALSE
#' @template binom-template
#'
#' @examples
#'
#' TVaR_binom(kappa = 0.8, size = 5, prob = 0.2)
#'
#' @export
TVaR_binom <- function(kappa, size, prob)
{
k <- 0:size
fx <- dbinom(x = k, size, prob)
vark <- qbinom(p = kappa, size, prob)
(Etronq_binom(d = vark, size, prob, less.than.d = FALSE) +
VaR.binom * (pbinom(vark, size, prob) - kappa)) /
(1 - kappa)
}
VaR_binom(kappa = 0.8, size = 5, prob = 0.2)
#'
#' @templateVar q FALSE
#' @template binom-template
#'
#' @examples
#'
#' VaR_binom(kappa = 0.8, size = 5, prob = 0.2)
#'
#' @export
#'
VaR_binom <- function(kappa, n, p) {
qbinom(p = kappa, size, prob)
}
VaR_binom(kappa = 0.8, size = 5, prob = 0.2)
#'
#' @templateVar q FALSE
#' @template binom-template
#'
#' @examples
#'
#' VaR_binom(kappa = 0.8, size = 5, prob = 0.2)
#'
#' @export
#'
VaR_binom <- function(kappa, size, prob) {
qbinom(p = kappa, size, prob)
}
VaR_binom(kappa = 0.8, size = 5, prob = 0.2)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
dpois
library(Distributacalcul)
VaR_gamma
library(Distributacalcul)
VaR_gamma
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' VaR_weibull(kappa = .2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' VaR_weibull(kappa = .2, shape = 3, rate = 0.25)
#'
VaR_gamma <- function(kappa, shape, rate = 1, scale = 1 / rate) {
qgamma(kappa, a, b)
}
VaR_weibull(kappa = .2, shape = 3, rate = 0.25)
VaR_weibull(kappa = .2, shape = 3, scale = 4)
VaR_gamma(kappa = .2, shape = 3, scale = 4)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' VaR_gamma(kappa = .2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' VaR_gamma(kappa = .2, shape = 3, rate = 0.25)
#'
VaR_gamma <- function(kappa, shape, rate = 1, scale = 1 / rate) {
qgamma(p = kappa, shape, rate)
}
VaR_gamma(kappa = .2, shape = 3, scale = 4)
VaR_gamma(kappa = .2, shape = 3, rate = 0.25)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' V_gamma(shape = 3, scale = 4)
#'
#' # With rate parameter
#' V_gamma(shape = 3, rate = 0.25)
#'
V_gamma <- function(shape, rate = 1, scale = 1 / rate) {
shape / (rate^2)
}
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, rate = 0.25)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' TVaR_gamma(kappa = .2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' TVaR_gamma(kappa = .2, shape = 3, rate = 0.25)
#'
TVaR_gamma <- function(kappa, shape, rate = 1, scale = 1 / rate) {
(shape * pgamma(q = VaR_gamma(kappa, shape, rate), shape = shape + 1, rate = rate, lower.tail = F)) /
(rate * (1 - kappa))
}
TVaR_gamma(kappa = .2, shape = 3, scale = 4)
TVaR_gamma(kappa = .2, shape = 3, rate = 0.25)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' SL_gamma(shape = 3, scale = 4)
#'
#' # With rate parameter
#' SL_gamma(shape = 3, rate = 0.25)
#'
SL_gamma <- function(d, shape, rate = 1, scale = 1 / rate) {
E_gamma(shape, rate) * pgamma(q = d, shape + 1, rate, lower.tail = F) -
d * pgamma(q = d, shape, rate, lower.tail = F)
}
SL_gamma(shape = 3, rate = 0.25)
SL_gamma(d = 2, shape = 3, scale = 4)
SL_gamma(d = 2, shape = 3, rate = 0.25)
# With scale parameter
TVaR_gamma(kappa = .2, shape = 3, scale = 4)
TVaR_gamma(kappa = .2, shape = 3, rate = 0.25)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, rate = 0.25)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, rate = 0.25)
V_gamma(shape = 3, rate = 0.25)
V_gamma(shape = 3, rate = 0.25)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' VaR_gamma(kappa = .2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' VaR_gamma(kappa = .2, shape = 3, rate = 0.25)
#'
VaR_gamma <- function(kappa, shape, rate = 1 / scale, scale = 1 / rate) {
qgamma(p = kappa, shape, rate)
}
VaR_gamma(kappa = .2, shape = 3, scale = 4)
VaR_gamma(kappa = .2, shape = 3, rate = 0.25)
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, rate = 0.25)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' V_gamma(shape = 3, scale = 4)
#'
#' # With rate parameter
#' V_gamma(shape = 3, rate = 0.25)
#'
V_gamma <- function(shape, rate = 1 / scale, scale = 1 / rate) {
shape / (rate^2)
}
V_gamma(shape = 3, scale = 4)
V_gamma(shape = 3, rate = 0.25)
TVaR_gamma(kappa = .2, shape = 3, scale = 4)
TVaR_gamma(kappa = .2, shape = 3, rate = 0.25)
(E_gamma(shape, rate) / (1 - kappa)) *
pgamma(q = VaR_gamma(kappa, shape, rate), shape = shape + 1, rate = rate, lower.tail = F)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' TVaR_gamma(kappa = .2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' TVaR_gamma(kappa = .2, shape = 3, rate = 0.25)
#'
TVaR_gamma <- function(kappa, shape, rate = 1 / scale, scale = 1 / rate) {
(E_gamma(shape, rate) / (1 - kappa)) *
pgamma(q = VaR_gamma(kappa, shape, rate), shape = shape + 1, rate = rate, lower.tail = F)
}
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' TVaR_gamma(kappa = .2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' TVaR_gamma(kappa = .2, shape = 3, rate = 0.25)
#'
TVaR_gamma <- function(kappa, shape, rate = 1 / scale, scale = 1 / rate) {
(E_gamma(shape, rate) / (1 - kappa)) *
pgamma(q = VaR_gamma(kappa, shape, rate), shape = shape + 1, rate = rate, lower.tail = F)
}
TVaR_gamma(kappa = .2, shape = 3, scale = 4)
TVaR_gamma(kappa = .2, shape = 3, rate = 0.25)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' SL_gamma(d = 2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' SL_gamma(d = 2, shape = 3, rate = 0.25)
#'
SL_gamma <- function(d, shape, rate = 1 / scale, scale = 1 / rate) {
E_gamma(shape, rate) * pgamma(q = d, shape + 1, rate, lower.tail = F) -
d * pgamma(q = d, shape, rate, lower.tail = F)
}
SL_gamma(d = 2, shape = 3, scale = 4)
SL_gamma(d = 2, shape = 3, rate = 0.25)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' Mexcess_gamma(shape = 3, scale = 4)
#'
#' # With rate parameter
#' Mexcess_gamma(shape = 3, rate = 0.25)
#'
Mexcess_gamma <- function(d, shape, rate = 1 / scale, scale = 1 / rate) {
numerateur   <- shape * (pgamma(d, shape + 1, rate, lower.tail = F))
denominateur <- rate * (pgamma(d, shape, rate, lower.tail = F))
(numerateur/denominateur) - d
}
Mexcess_gamma(d = 2, shape = 3, scale = 4)
Mexcess_gamma(d = 2, shape = 3, rate = 0.25)
kthmoment_erlang
prod(sapply(0:(k - 1), function(i) (shape + i))) /
(rate^k)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' kthmoment_gamma(d = 2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' kthmoment_gamma(d = 2, shape = 3, rate = 0.25)
#'
kthmoment_gamma <- function(k, shape, rate = 1 / scale, scale = 1 / rate) {
prod(sapply(0:(k - 1), function(i) (shape + i))) /
(rate^k)
}
kthmoment_gamma(d = 2, shape = 3, scale = 4)
kthmoment_gamma(d = 2, shape = 3, rate = 0.25)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' kthmoment_gamma(k = 2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' kthmoment_gamma(k = 2, shape = 3, rate = 0.25)
#'
kthmoment_gamma <- function(k, shape, rate = 1 / scale, scale = 1 / rate) {
prod(sapply(0:(k - 1), function(i) (shape + i))) /
(rate^k)
}
kthmoment_gamma(k = 2, shape = 3, scale = 4)
kthmoment_gamma(k = 2, shape = 3, rate = 0.25)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' Etronq_gamma(d = 2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' Etronq_gamma(d = 2, shape = 3, rate = 0.25)
#'
Etronq_gamma <- function(d, shape, rate = 1 / scale, scale = 1 / rate) {
E_gamma(shape, rate) * pgamma(q = d, shape + 1, rate)
}
Etronq_gamma(d = 2, shape = 3, scale = 4)
Etronq_gamma(d = 2, shape = 3, rate = 0.25)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' Elim_gamma(d = 2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' Elim_gamma(d = 2, shape = 3, rate = 0.25)
#'
Elim_gamma <- function(d, shape, rate = 1 / scale, scale = 1 / rate) {
E_gamma(shape, rate) * pgamma(q = d, shape + 1, rate) +
d * pgamma(q = d, shape, rate, lower.tail = F)
}
Elim_gamma(d = 2, shape = 3, scale = 4)
Elim_gamma(d = 2, shape = 3, rate = 0.25)
#' @export
#'
#' @examples
#'
#' # With scale parameter
#' E_gamma(shape = 3, scale = 4)
#'
#' # With rate parameter
#' E_gamma(shape = 3, rate = 0.25)
#'
E_gamma <- function(shape, rate = 1 / scale, scale = 1 / rate) {
shape / rate
}
E_gamma(shape = 3, scale = 4)
E_gamma(shape = 3, rate = 0.25)
kthmoment_gamma(k = 1, shape = 3, rate = 4)
kthmoment_gamma(k = 1, shape = 3, rate = .25)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
#'
#' # With scale parameter
#' Etronq_gamma(d = 2, shape = 3, scale = 4)
#'
#' # With rate parameter
#' Etronq_gamma(d = 2, shape = 3, rate = 0.25)
#'
#' # values greather than d
#' Etronq_gamma(d = 2, shape = 3, rate = 0.25, less.than.d = FALSE)
#'
Etronq_gamma <- function(d, shape, rate = 1 / scale, scale = 1 / rate, less.than.d = TRUE) {
if (less.than.d) {
Etronq.gamma <- E_gamma(shape, rate) * pgamma(q = d, shape + 1, rate)
} else {
Etronq.gamma <- E_gamma(shape, rate) * pgamma(q = d, shape + 1, rate, lower.tail = FALSE)
}
return(Etronq.gamma)
}
Etronq_gamma(d = 2, shape = 3, rate = 0.25, less.than.d = FALSE)
Etronq_gamma(d = 2, shape = 3, rate = 0.25)
E_gamma(3, 0.25)
E_gamma(3, 0.25) - Etronq_gamma(d = 2, shape = 3, rate = 0.25)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
