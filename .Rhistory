)
sum(fft.obs[1:1001])
fft.obs <- fft.maison(
k = 1000,
m = 18,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
sum(fft.obs[1:1001])
fft.obs <- fft.maison(
k = 1000,
m = 18,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.maison <- function(k, h, m, sev.distr, freq.distr, sev.param, freq.param, method = "lower", return.all = TRUE, ...) {
stopifnot(k >= 0, h > 0, freq.distr %in% c("nbinom", "geo", "bern", "binom", "pois"))
f_X <- vector(length = (k) + 1)
f_B_discr <- Discr_Density(k, h, sev.distr, sev.param, method)
length_n <- 2^m
nB <- length(f_B_discr)
##  S'assurer d'avoir un vecteur de la bonne longueur
f_B_discr_vector <- c(f_B_discr, rep(0, length_n - nB))
f_B_fft <- fft(z = f_B_discr_vector)
##  S'assurer d'avoir le bon nom de fonction du package Distributacalcul
freq.distr.PGF <- dplyr::case_when(
freq.distr %in% c("geo", "nbinom") ~ "negbinom",
freq.distr %in% c("bern") ~ "binom",
TRUE ~ freq.distr
)
f_X_fft <- rlang::exec(.fn = paste0("PGF_", freq.distr.PGF), t = f_B_discr, !!!freq.param, .env = rlang::ns_env(x = "Distributacalcul"))
f_X_vector <- fft(f_X_fft, inverse = TRUE)
f_X_vector_Re <- Re(f_X_vector) / length_n
ifelse(return.all, return(f_X_vector_Re), return(f_X_vector_Re[(k) + 1]))
}
fft.obs <- fft.maison(
k = 1000,
m = 18,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs
sum(fft.obs[1:1001])
sum(fft.obs)
fft.obs <- fft.maison(
k = 1000,
m = 1,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 5,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 10,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 10,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
sum(fft.obs)
1-sum(fft.obs)
fft.obs <- fft.maison(
k = 1000,
m = 20,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
1-sum(fft.obs)
fft.obs <- fft.maison(
k = 1000,
m = 4,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 4,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 5,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 6,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 7,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 8,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 9,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 10,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 10,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
1-sum(fft.obs)
library(Distributacalcul)
fft.maison <- function(k, h, m, sev.distr, freq.distr, sev.param, freq.param, method = "lower", return.all = TRUE, ...) {
stopifnot(k >= 0, h > 0, freq.distr %in% c("nbinom", "geo", "bern", "binom", "pois"))
f_X <- vector(length = (k) + 1)
f_B_discr <- Discr_Density(k, h, sev.distr, sev.param, method)
length_n <- 2^m
nB <- length(f_B_discr)
##  S'assurer d'avoir un vecteur de la bonne longueur
f_B_discr_vector <- c(f_B_discr, rep(0, length_n - nB))
f_B_fft <- fft(z = f_B_discr_vector)
##  S'assurer d'avoir le bon nom de fonction du package Distributacalcul
freq.distr.PGF <- dplyr::case_when(
freq.distr %in% c("geo", "nbinom") ~ "negbinom",
freq.distr %in% c("bern") ~ "binom",
TRUE ~ freq.distr
)
f_X_fft <- rlang::exec(.fn = paste0("PGF_", freq.distr.PGF), t = f_B_discr, !!!freq.param, .env = rlang::ns_env(x = "Distributacalcul"))
f_X_vector <- fft(f_X_fft, inverse = TRUE)
f_X_vector_Re <- Re(f_X_vector) / length_n
ifelse(return.all, return(f_X_vector_Re), return(f_X_vector_Re[(k) + 1]))
}
fft.obs <- fft.maison(
k = 1000,
m = 10,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
fft.obs <- fft.maison(
k = 1000,
m = 10,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
1-sum(fft.obs)
PGF_pois
k = 1000
m = 10
h = 1
method = "lower"
freq.distr = "pois"
sev.distr = "pareto"
return.all = T
freq.param = list(lambda = 10)
sev.param = list(shape = 1.5, scale = 5)
fft.poiscomposee<-function(lam, n, fx) {
# 2 ** n = longueur du vecteur # prendre n eleve (ex: n=12 ou plus)
# premiere masse de fx est Pr(X=0)
aa <- 2^n
nx <- length(fx)
ftx <- fft(c(fx, rep(0, aa - nx)))
fts<-exp(lam * (ftx - 1))
fs <- Re(fft(fts, T))/aa
return(fs)
}
fft.poiscomposee(lam = 10, n = 20,
fx = Discr_Density(k = 1000, h = 1,
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5), method = "lower"))
ff <- fft.poiscomposee(lam = 10, n = 20,
fx = Discr_Density(k = 1000, h = 1,
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5), method = "lower"))
sum(ff)
fft.obs <- fft.maison(
k = 1000,
m = 20,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5),
return.all = T
)
1-sum(fft.obs)
sum(fft.obs)
fft.obs <- fft.maison(
k = 1000,
m = 20,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
)
sum(fft.obs)
n = 20
lam = 10
fx = Discr_Density(k = 1000, h = 1,
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5), method = "lower")
aa <- 2^n
aa
length_n <- 2^m
length_n
m=20
length_n <- 2^m
length_n
nx <- length(fx)
nx
f_B_discr <- Discr_Density(k, h, sev.distr, sev.param, method)
f_B_discr
nB <- length(f_B_discr)
nB
nx
ftx <- fft(c(fx, rep(0, aa - nx)))
ftx
##  S'assurer d'avoir un vecteur de la bonne longueur
f_B_discr_vector <- c(f_B_discr, rep(0, length_n - nB))
f_B_discr_vector==ftx
f_B_discr==fx
f_B_fft <- fft(z = f_B_discr_vector)
f_B_fft==ftx
fts<-exp(lam * (ftx - 1))
fts
##  S'assurer d'avoir le bon nom de fonction du package Distributacalcul
freq.distr.PGF <- dplyr::case_when(
freq.distr %in% c("geo", "nbinom") ~ "negbinom",
freq.distr %in% c("bern") ~ "binom",
TRUE ~ freq.distr
)
f_X_fft <- rlang::exec(.fn = paste0("PGF_", freq.distr.PGF), t = f_B_discr, !!!freq.param, .env = rlang::ns_env(x = "Distributacalcul"))
f_X_fft
f_X_fft==fts
PGF_pois
fft.maison <- function(k, h, m, sev.distr, freq.distr, sev.param, freq.param, method = "lower", return.all = TRUE, ...) {
stopifnot(k >= 0, h > 0, freq.distr %in% c("nbinom", "geo", "bern", "binom", "pois"))
f_X <- vector(length = (k) + 1)
f_B_discr <- Discr_Density(k, h, sev.distr, sev.param, method)
length_n <- 2^m
nB <- length(f_B_discr)
##  S'assurer d'avoir un vecteur de la bonne longueur
f_B_discr_vector <- c(f_B_discr, rep(0, length_n - nB))
f_B_fft <- fft(z = f_B_discr_vector)
##  S'assurer d'avoir le bon nom de fonction du package Distributacalcul
freq.distr.PGF <- dplyr::case_when(
freq.distr %in% c("geo", "nbinom") ~ "negbinom",
freq.distr %in% c("bern") ~ "binom",
TRUE ~ freq.distr
)
f_X_fft <- rlang::exec(.fn = paste0("PGF_", freq.distr.PGF), t = f_B_fft, !!!freq.param, .env = rlang::ns_env(x = "Distributacalcul"))
f_X_vector <- fft(f_X_fft, inverse = TRUE)
f_X_vector_Re <- Re(f_X_vector) / length_n
ifelse(return.all, return(f_X_vector_Re), return(f_X_vector_Re[(k) + 1]))
}
fft.obs <- fft.maison(
k = 1000,
m = 20,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
)
sum(fft.obs)
1-sum(fft.obs)
fft.obs <- fft.maison(
k = 1000,
m = 10,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
)
1-sum(fft.obs)
fft.obs <- fft.maison(
k = 1001,
m = 10,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
)
1-sum(fft.obs)
fft.obs <- fft.maison(
k = 1000,
m = 10,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
)
1-sum(fft.obs)
fft.obs <- fft.maison(
k = 500000,
m = 10,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
)
fft.obs <- fft.maison(
k = 500000,
m = 20,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
)
1-sum(fft.obs)
1-sum(fft.obs[1:1001])
1-sum(fft.obs[1:c(1001, 5001)])
fft.obs[1:c(1001, 5001)]
sum(fft.obs[1:c(1001, 5001)])
1-sum(fft.obs[1:5001])
1-sum(fft.obs[1:10001])
1-sum(fft.obs[1:50001])
fft.obs <- fft.maison(
k = 500000,
m = 20,
h = 1, method = "lower",
freq.distr = "nbinom", freq.param = list(size = 0.5, prob = 0.5 / (0.5 + 10)),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
)
1-sum(fft.obs[1:50001])
1-sum(fft.obs[1:1001])
1-sum(fft.obs[1:5001])
fft.maison(
k = 500000,
m = 20,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
)
system.time(fft.maison(
k = 500000,
m = 20,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
))
system.time(fft.poiscomposee(lam = 10, n = 20,
fx = Discr_Density(k = 1000, h = 1,
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5), method = "lower")))
system.time(fft.poiscomposee(lam = 10, n = 20,
fx = Discr_Density(k = 1000, h = 1,
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5), method = "lower")))
system.time(fft.maison(
k = 500000,
m = 20,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
))
system.time(fft.maison(
k = 500000,
m = 20,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
))
system.time(fft.poiscomposee(lam = 10, n = 20,
fx = Discr_Density(k = 1000, h = 1,
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5), method = "lower")))
replicate(n = 5, system.time(fft.poiscomposee(lam = 10, n = 20,
fx = Discr_Density(k = 1000, h = 1,
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5), method = "lower"))))
replicate(n = 5, system.time(fft.maison(
k = 500000,
m = 20,
h = 1, method = "lower",
freq.distr = "pois", freq.param = list(lambda = 10),
sev.distr = "pareto", sev.param = list(shape = 1.5, scale = 5)
))
)
quantile(x = fft.obs, probs = 0.9)
quantile(x = fft.obs, probs = 0.9, type = 1)
quantile(x = fft.obs, probs = 0.9, type = 7)
quantile(x = fft.obs, probs = 0.9, type = 5)
fft.obs
cumsum(fft.obs)
quantile(x = cumsum(fft.obs), probs = 0.9, type = 5)
quantile(x = cumsum(fft.obs), probs = 0.9)
quantile(x = cumsum(fft.obs), probs = 0.9, names = T)
which(quantile(x = cumsum(fft.obs), probs = 0.9))
which(fft.obs == quantile(x = cumsum(fft.obs), probs = 0.9))
quantile(x = cumsum(fft.obs), probs = 0.9)
as.numeric(quantile(x = cumsum(fft.obs), probs = 0.9))
which(fft.obs == as.numeric(quantile(x = cumsum(fft.obs), probs = 0.9)))
which(fft.obs == as.numeric(quantile(x = cumsum(fft.obs), probs = 0.9)))
which.min(abs(cumsum(fft.obs) - 0.9))
fft.var <- function(kap, fft_density) {
which.min(abs(cumsum(fft.obs) - 0.9))
}
fft.var(kap = c(0.9, 0.99), fft_density = fft.obs)
sapply(c(0.9, 0.99), ~fft.var(kap = .x, fft_density = fft.obs))
sapply(c(0.9, 0.99), function(k) fft.var(kap = k, fft_density = fft.obs))
fft.var <- function(kap, fft_density) {
which.min(abs(cumsum(fft.obs) - kap))
}
sapply(c(0.9, 0.99), function(k) fft.var(kap = k, fft_density = fft.obs))
seq(from = 9E-1, to = 9E-6, 1E-1)
seq(from = 9E-1, to = 9E-6, by = 1E-1)
1E-1
seq(from = 9E-1, to = 9E-6, length.out = 6)
fft.var <- function(kap, fft_density) {
which.min(abs(cumsum(fft.obs) - kap))
}
sapply(c(0.9, 0.99, 0.999, 0.9999, 0.9999), function(k) fft.var(kap = k, fft_density = fft.obs))
sapply(c(0.9, 0.99, 0.999, 0.9999, 0.99999, 0.999999), function(k) fft.var(kap = k, fft_density = fft.obs))
n <- 10
sqrt(27)
sqrt(19)
distr.param <- list(
prob = c(0.091, 0.064, 0.049, 0.019, 0.027),
b <- c(1, 1, 2, 2, 3) * 100
)
distr.param <- list(
prob = c(0.091, 0.064, 0.049, 0.019, 0.027),
b = c(1, 1, 2, 2, 3) * 100
)
distr.param
distr.param <- list(
prob = c(0.091, 0.064, 0.049, 0.019, 0.027, 0.031, 0.014, 0.023, 0.058, 0.065),
b = c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5) * 100
)
distr.param
set.seed(42)
n.var <- 10
U.vec <- runif(n = n.var)
set.seed(42)
U.vec <- runif(n = n.var)
U.vec
matrix(
data = c(
U.vec,
1 - U.vec
),
ncol = 2
)
matrix(
data = c(
U.vec,
1 - U.vec
),byrow = T,
ncol = 2
)
qbinom(p = U.vec, prob = distr.param$prob, size = 1)
qbinom(p = U.vec, prob = distr.param$prob, size = 1) * b
sapply(U.vec, function(x) qbinom(p = x, prob = distr.param$prob, size = 1) * b
)
lapply(U.vec, function(x) qbinom(p = x, prob = distr.param$prob, size = 1) * b)
lapply(U.vec, function(x) qbinom(p = x, prob = distr.param$prob, size = 1) * b)
lapply(U.vec, function(x) qbinom(p = x, prob = distr.param$prob, size = 1) * b)
lapply(U.vec, function(x) qbinom(p = x, prob = distr.param$prob, size = 1) * b)
lapply(U.vec, function(x) qbinom(p = x, prob = distr.param$prob, size = 1) * b)
lapply(U.vec, function(x) qbinom(p = x, prob = distr.param$prob, size = 1) * b)
set.seed(4200)
U.vec <- runif(n = n.var)
lapply(U.vec, function(x) qbinom(p = x, prob = distr.param$prob, size = 1) * b)
set.seed(69)
U.vec <- runif(n = n.var)
lapply(U.vec, function(x) qbinom(p = x, prob = distr.param$prob, size = 1) * b)
set.seed(42)
U.vec <- runif(n = n.var)
lapply(U.vec, function(x) qbinom(p = x, prob = distr.param$prob, size = 1) * b)
lapply(U.vec, function(x) rbind(b, qbinom(p = x, prob = distr.param$prob, size = 1) * b))
