fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 10),)
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
)
ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20),)
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
)
ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20))
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
)
ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 30))
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
)
ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20))
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
) +
ylim(c(0, 4))
ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20))
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
)
ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20))
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = .x, shape = shapes, rate = rates, k0 = 100)),
xlim = c(0, 0.5),
geom = "area",
fill = "red",
alpha = 0.7
)
ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20))
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 100)),
xlim = c(0, 0.5),
geom = "area",
fill = "red",
alpha = 0.7
)
ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20))
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20)),
xlim = c(0, 0.5),
geom = "area",
fill = "red",
alpha = 0.7
)
ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20))
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20)),
xlim = c(0, 0.5),
geom = "area",
fill = "red",
alpha = 0.7
) +
theme_bw()
# Binary Operator
'%=%.lbunch' = function(l, r, ...) {
Envir = as.environment(-1)
if (length(r) > length(l))
warning("RHS has more args than LHS. Only first", length(l), "used.")
if (length(l) > length(r))  {
warning("LHS has more args than RHS. RHS will be repeated.")
r <- extendToMatch(r, l)
}
for (II in 1:length(l)) {
do.call('<-', list(l[[II]], r[[II]]), envir=Envir)
}
}
# Binary Operator
'%=%.lbunch' = function(l, r, ...) {
Envir = as.environment(-1)
if (length(r) > length(l))
warning("RHS has more args than LHS. Only first", length(l), "used.")
if (length(l) > length(r))  {
warning("LHS has more args than RHS. RHS will be repeated.")
r <- extendToMatch(r, l)
}
for (II in 1:length(l)) {
do.call('<-', list(l[[II]], r[[II]]), envir=Envir)
}
}
1%=%.lbunch2
# Generic form
'%=%' <- function(l, r, ...) UseMethod('%=%')
1%=%2
c(1, 2) %=% c(1, 2)
"test" %=% "tet"
g(A, B, c) %=% c(2.2E-4, 2.7E-6, 1.124)
source('~/OneDrive - UniversitÃ© Laval/Packages/RESSOURCE/multiple definitions at once function.R', echo=TRUE)
g(A, B, c) %=% c(2.2E-4, 2.7E-6, 1.124)
A
B
g(A, B, c) %=% c(2.2E-4, 2.7E-6, 1.124, 1)
f <- function(x, ...) {
dnorm(x = x)
}
f(x = 2, mu = 1)
f(x = 2, mu = 2)
f(x = 2, mu = 3)
f(x = 2, mean = 2)
f(x = 2, mean = 1)
f(x = 2, mean = 5)
f <- function(x, ...) {
dnorm(x = x, ...)
}
f(x = 2, mean = 5)
f(x = 2, mean = 2)
f(x = 2, mean = 3)
f(x = 2, mean = 3, sd = 2)
library(tidyverse)
f_DePril <- function(distr, x, ...) {
rlang::exec(
.fn = paste0("d", distr),
x = x,
...
# as.numeric(shape()), as.numeric(rate())
)
}
f_DePril(distr = "norm", x = 2, mean = 3, sd = 2)
f_DePril(distr = "norm", x = 2, mean = 4, sd = 2)
f_DePril(distr = "norm", x = 2, mean = 1, sd = 2)
f_DePril(distr = "norm", x = 2, mean = 0, sd = 2)
f_DePril(distr = "norm", x = 2, mean = -4, sd = 2)
f_DePril(distr = "norm", x = 2, mean = 100, sd = 2)
f_DePril(distr = "norm", x = 2, mean = 10, sd = 2)
f_DePril(distr = "norm", x = 2, mean = 10, sd = 200)
f_DePril(distr = "norm", x = 2, mean = 1, sd = 200)
f_DePril(distr = "norm", x = 2, mean = 1, sd = 20)
f_DePril(distr = "norm", x = 2, mean = 1, sd = 2)
dnorm(x = 2, mean = 1, sd = 2)
f_DePril(distr = "norm", x = 2, mean = 1, sd = 2)
dnorm(x = 2, mean = 1, sd = 2)
f_DePril(distr = "norm", x = 2, mean = 1, sd = 20)
dnorm(x = 2, mean = 1, sd = 29)
dnorm(x = 2, mean = 1, sd = 20)
seq_along(2)
seq_along(4)
seq_len(4)
#' @param distr Severity distribution.
#' @param n number of distributions to mix
#' @param ... specifiy the distribution's parameters.
f_DePril <- function(distr, k, n, ...) {
f_Sn <- vector(length = n + 1)
f_Sn[1] <- rlang::exec(.fn = paste0("d", distr), x = 0, ...)^n
for (i in seq_len(n)) {
f_Sn[i + 1] <- sum(
sapply(seq_len(k), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, ...) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)
}
}
f_DePril(distr = "binom", k = 2, n = 10, size = 5, prrob = 0.20)
f_DePril(distr = "binom", k = 2, n = 10, size = 5, prob = 0.20)
#' @param distr Severity distribution.
#' @param n number of distributions to mix
#' @param ... specifiy the distribution's parameters.
f_DePril <- function(distr, k, n, ...) {
f_Sn <- vector(length = n + 1)
f_Sn[1] <- rlang::exec(.fn = paste0("d", distr), x = 0, ...)^n
for (i in seq_len(n)) {
f_Sn[i + 1] <- sum(
sapply(seq_len(k), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, ...) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)
}
return(f_Sn[k + 1])
}
f_DePril(distr = "binom", k = 2, n = 10, size = 5, prob = 0.20)
f_DePril(distr = "binom", k = 0, n = 10, size = 5, prob = 0.20)
f_DePril(distr = "binom", k = 1, n = 10, size = 5, prob = 0.20)
f_DePril(distr = "binom", k = 0, n = 10, size = 5, prob = 0.20)
k = 0
distr = "binom"
n = 10
size = 5
prob = 0.20
f_Sn <- vector(length = n + 1)
f_Sn
#' @param distr Severity distribution.
#' @param n number of distributions to mix
#' @param ... specifiy the distribution's parameters.
f_DePril <- function(distr, k, n, ...) {
f_Sn <- vector(length = k + 1)
f_Sn[1] <- rlang::exec(.fn = paste0("d", distr), x = 0, ...)^n
for (i in seq_len(n)) {
f_Sn[i + 1] <- sum(
sapply(seq_len(k), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, ...) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)
}
return(f_Sn[k + 1])
}
f_DePril(distr = "binom", k = 0, n = 10, size = 5, prob = 0.20)
f_Sn <- vector(length = k + 1)
f_Sn
seq_len(0)
seq_len(k+1)
#' @param distr Severity distribution.
#' @param n number of distributions to mix
#' @param ... specifiy the distribution's parameters.
f_DePril <- function(distr, k, n, ...) {
f_Sn <- vector(length = k + 1)
f_Sn[1] <- rlang::exec(.fn = paste0("d", distr), x = 0, ...)^n
for (i in seq_len(n)) {
f_Sn[i + 1] <- sum(
sapply(seq_len(k + 1), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, ...) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)
}
return(f_Sn[k + 1])
}
f_DePril(distr = "binom", k = 0, n = 10, size = 5, prob = 0.20)
rlang::exec(.fn = paste0("d", distr), x = j, ...)
f_DePril <- function(distr, k, n, ...) {
f_Sn <- vector(length = k + 1)
f_Sn[1] <- rlang::exec(.fn = paste0("d", distr), x = 0, ...)^n}
f_DePril(distr = "binom", k = 0, n = 10, size = 5, prob = 0.20)
#' @param distr Severity distribution.
#' @param n number of distributions to mix
#' @param ... specifiy the distribution's parameters.
f_DePril <- function(distr, k, n, ...) {
f_Sn <- vector(length = k + 1)
f_Sn[1] <- rlang::exec(.fn = paste0("d", distr), x = 0, ...)^n
f_Sn
}
f_DePril(distr = "binom", k = 0, n = 10, size = 5, prob = 0.20)
seq_len(n)
# for (i in seq_len(n)) {
i=1
f_Sn[i + 1]
i + 1
f_Sn <- vector(length = k + 1)
f_Sn[1] <- rlang::exec(.fn = paste0("d", distr), x = 0, ...)^n
f_Sn
rlang::exec(.fn = paste0("d", distr), x = 0, ize = 5, prob = 0.20)^n
rlang::exec(.fn = paste0("d", distr), x = 0, size = 5, prob = 0.20)^n
f_Sn[1] <-     rlang::exec(.fn = paste0("d", distr), x = 0, size = 5, prob = 0.20)^n
f_Sn
k = 2
f_Sn <- vector(length = k + 1)
f_Sn[1] <-     rlang::exec(.fn = paste0("d", distr), x = 0, size =5, prob=0.2)^n
f_Sn
[i + 1]
f_Sn[i + 1]
i + 1
f_Sn
f_Sn[0]
f_Sn[1]
# f_Sn[i + 1] <-
sum(
sapply(seq_len(k + 1), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, ...) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)
# f_Sn[i + 1] <-
sum(
sapply(seq_len(k + 1), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, ...) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)}
# f_Sn[i + 1] <-
sum(
sapply(seq_len(k + 1), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, ...) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)}
f_DePril <- function(distr, k, n, ...) {
f_Sn <- vector(length = k + 1)
f_Sn[1] <- rlang::exec(.fn = paste0("d", distr), x = 0, ...)^n
# for (i in seq_len(n)) {
# f_Sn[i + 1] <-
sum(
sapply(seq_len(k + 1), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, ...) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)}
f_DePril(distr = "binom", k = 2, n = 10, size = 5, prob = 0.20)
k + 1
seq_len(k + 1)
1:(k + 1)
f_DePril <- function(distr, k, n, ...) {
f_Sn <- vector(length = k + 1)
f_Sn[1] <- rlang::exec(.fn = paste0("d", distr), x = 0, ...)^n
# for (i in seq_len(n)) {
# f_Sn[i + 1] <-
sum(
sapply(1:(k + 1), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, ...) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)}
f_DePril(distr = "binom", k = 2, n = 10, size = 5, prob = 0.20)
rlang::exec(.fn = paste0("d", distr), x = j, ...)
rlang::exec(.fn = paste0("d", distr), x = j, size = 5, prob = 0.20)
j=1
rlang::exec(.fn = paste0("d", distr), x = j, size = 5, prob = 0.20)
f_Sn[(k - j) + 1]
(k - j)
j
k
(n + 1) * (j / k) - 1
f_Sn[1]
# f_Sn[i + 1] <-
sum(
sapply(seq_len(k + 1), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, size = 5, prob = 0.20) *
f_Sn[(k - j)] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)
sum(
sapply(seq_len(k + 1), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, size = 5, prob = 0.20) *
f_Sn[(k - j)] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)
sapply(seq_len(k + 1), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, size = 5, prob = 0.20) *
f_Sn[(k - j)] *
(
(n + 1) * (j / k) - 1
)
})
k
j=3
f_Sn[(k - j)]
k
sapply(seq_len(k), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, size = 5, prob = 0.20) *
f_Sn[(k - j)] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
j=2
k
sapply(seq_len(k), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, size = 5, prob = 0.20) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
})
# f_Sn[i + 1] <-
sum(
sapply(seq_len(k), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, size = 5, prob = 0.20) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)
#' @param distr Severity distribution.
#' @param n number of distributions to mix
#' @param ... specifiy the distribution's parameters.
f_DePril <- function(distr, k, n, ...) {
f_Sn <- vector(length = k + 1)
f_Sn[1] <- rlang::exec(.fn = paste0("d", distr), x = 0, ...)^n
for (i in seq_len(n)) {
f_Sn[i + 1] <-
sum(
sapply(seq_len(k), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, size = 5, prob = 0.20) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)
}
return(f_Sn[k + 1])
}
f_DePril(distr = "binom", k = 2, n = 10, size = 5, prob = 0.20)
#' @param distr Severity distribution.
#' @param n number of distributions to mix
#' @param ... specifiy the distribution's parameters.
f_DePril <- function(distr, k, n, ...) {
f_Sn <- vector(length = k + 1)
f_Sn[1] <- rlang::exec(.fn = paste0("d", distr), x = 0, ...)^n
for (i in seq_len(n)) {
f_Sn[i + 1] <-
sum(
sapply(seq_len(k), function(j) {
rlang::exec(.fn = paste0("d", distr), x = j, size = 5, prob = 0.20) *
f_Sn[(k - j) + 1] *
(
(n + 1) * (j / k) - 1
)
}) / f_Sn[1]
)
}
return(f_Sn)
}
f_DePril(distr = "binom", k = 2, n = 10, size = 5, prob = 0.20)
