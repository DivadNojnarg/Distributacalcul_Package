Etronq_erlang(d = 2, shape = 2, scale = 5)
Etronq_erlang(d = 2, shape = 2, rate = 0.2)
Etronq_erlang(d = 2, shape = 2, rate = 0.2, less.than.d = FALSE)
E_erlang(shape=2, rate=0.2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/kthmoment_erlang.R', echo=TRUE)
kthmoment_erlang(k = 2, shape = 2, scale = 5)
kthmoment_erlang(k = 2, shape = 2, rate = 0.2)
kthmoment_erlang(k = 1, shape = 2, rate = 0.2)
kthmoment_erlang(k = 0, shape = 2, rate = 0.2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/Elim_erlang.R', echo=TRUE)
Elim_erlang(d = 2, shape = 2, scale = 5)
Elim_erlang(d = 2, shape = 2, rate = 0.2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/SL_erlang.R', echo=TRUE)
SL_erlang(d = 2, shape = 2, scale = 5)
SL_erlang(d = 2, shape = 2, rate = 0.2)
qgamma
VaR_gamma
qgamma(p = 1, shape = 2, rate = 2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/VaR_erlang.R', echo=TRUE)
VaR_erlang(kap = .2, shape = 3, scale = 4)
VaR_erlang(kap = .2, shape = 3, rate = 0.25)
vark <- stats::qgamma(p = kap, shape = shape, rate = rate)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/TVaR_erlang.R', echo=TRUE)
TVaR_erlang(kap = .2, shape = 3, scale = 4)
TVaR_erlang(kap = .2, shape = 3, rate = 0.25)
qbeta(p = 1)
qbeta(p = 1, shape1 = 1, shape2 = 2)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/VaR_beta.R', echo=TRUE)
VaR_beta(kap = .99, shape1 = 4, shape2 = 5)
qbinom(p = 1, size = 2, prob = 0.4)
qbinom(p = 0, size = 2, prob = 0.4)
qbinom(p = 0, size = -2, prob = 0.4)
library(Distributacalcul)
rm(list = ls())
install()
check()
size=10
prob=0.5
k <- 0:size
k
fx <- stats::dbinom(x = k, size, prob)
fx
vark <- stats::qbinom(p = kap, size, prob)
vark
kap=0.99
vark <- stats::qbinom(p = kap, size, prob)
vark
stats::pbinom(q = vark, size = size, prob = prob)
(stats::pbinom(q = vark, size = size, prob = prob) - kap)
vark * (stats::pbinom(q = vark, size = size, prob = prob) - kap)
Etronq_binom(d = vark, size, prob, less.than.d = FALSE) +
vark * (stats::pbinom(q = vark, size = size, prob = prob) - kap))
Etronq_binom(d = vark, size, prob, less.than.d = FALSE) +
vark * (stats::pbinom(q = vark, size = size, prob = prob) - kap)
(
Etronq_binom(d = vark, size, prob, less.than.d = FALSE) +
vark * (stats::pbinom(q = vark, size = size, prob = prob) - kap)
) / (1 - kap)
VaR_binom
qbinom
k <- 0:size
fx <- stats::dbinom(x = k, size, prob)
fx
k
k
usethis::use_package(package = "shiny")
usethis::use_package(package = "dplyr")
usethis::use_package(package = "ggplot2")
usethis::use_package(package = plotly)
usethis::use_package(package = 'plotly')
usethis::use_package(package = 'tippy')
usethis::use_package(package = 'shiny')
usethis::use_package(package = 'shinyjs')
usethis::use_package(package = 'shinyWidgets')
usethis::use_package(package = 'shinydashboardPlus')
usethis::use_package(package = 'shinydashboard')
check()
check()
check()
check()
usethis::use_package(package = "rlang")
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
Distributacalcul::Distributacalcul_vis(law ="norm")
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/module_shiny.R', echo=TRUE)
Distributacalcul_vis("norm")
ggplot(data = data.frame(
rnorm(n = 10)
))
ggplot(data = data.frame(
rnorm(n = 10)
)) +
geom_point()
ggplot(data = data.frame(
rnorm(n = 10)
),
aes(x = ~.x)) +
geom_point()
ggplot(data = data.frame(
rnorm(n = 10)
),
aes(x)) +
geom_point()
ggplot(data = data.frame(
rnorm(n = 10)
),
aes(x = `rnorm`)) +
geom_point()
ggplot(data = data.frame(
rnorm(n = 10)
),
aes(x = `rnorm(n = 10)`)) +
geom_point()
data.frame(
rnorm(n = 10)
)
data.frame(
x.limz = rnorm(n = 10)
)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/module_shiny.R', echo=TRUE)
Distributacalcul_vis("norm")
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/module_shiny.R', echo=TRUE)
Distributacalcul_vis("norm")
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/module_shiny.R', echo=TRUE)
Distributacalcul_vis("norm")
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/module_shiny.R', echo=TRUE)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/module_shiny.R', echo=TRUE)
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/module_shiny.R', echo=TRUE)
check()
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/module_shiny.R', echo=TRUE)
check()
check()
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/module_shiny.R', echo=TRUE)
Distributacalcul_vis("norm")
check*
check()
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
Distributacalcul::Distributacalcul_vis(law = "norm")
usethis::edit_r_profile()
library(Distributacalcul)
library(Distributacalcul)
document()
library(Distributacalcul)
library(Distributacalcul)
document()
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
build()
use_description()
R CMD check
checkCRAN()
library(Distributacalcul)
Distributacalcul_vis(law = "lnorm")
Distributacalcul_vis(law = "lnorm")
Distributacalcul_vis(law = "gamma")
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/module_shiny.R', echo=TRUE)
Distributacalcul_vis("norm")
Distributacalcul_vis("lnorm")
source('~/OneDrive - Université Laval/Packages/Distributacalcul/R/module_shiny.R', echo=TRUE)
Distributacalcul_vis("norm")
library(Distributacalcul)
library(Distributacalcul)
document()
check()
use_build_ignore(files = "man-roxygen")
edit_r_buildignore()
use_build_ignore(files = "build_site_pkgdown")
use_build_ignore(files = "build_site_pkgdown.R")
check()
test("Distributacalcul")
test()
library(Distributacalcul)
rm(list = ls())
library(Distributacalcul)
library(Distributacalcul)
library(Distributacalcul)
version
numeric_version()
devtools::package_info()
release_checks()
release()
spell_check()
spell_check("Distributacalcul")
spell_check(pkg = "Distributacalcul")
spell_check()
install.packages(spelling)
install.packages("spelling")
spell_check()
release()
release()
release()
check_rhub()
DePril_RecursiveDensity <- function(s, n, distr, ...) {
stopifnot(s >= 0, n > 0, distr %in% c("nbinom", "binom", "geom", "pois", "unif"))
f_S <- vector(length = s + 1)
f_X <- rlang::exec(.fn = paste0("d", distr), x = 0:s, ...)
# e.g. avec distr = "binom" et en mettant size = 5, prob = 0.20 en argument f_X <- dbinom(x = 0:s, size = 5, prob = 0.20)
f_S[(0) + 1] <- f_X[(0) + 1]^n
if (s > 0) {
for (i in 1:s) {
f_S[(i) + 1] <- sum(
sapply(1:i,
function(j) {
f_X[(j) + 1] * ((n + 1) * ((j) / i) - 1) * f_S[(i - j) + 1]
}
)
) /
f_X[(0) + 1]
}
}
return(f_S[(s) + 1])
}
DePril_RecursiveDensityVec <- Vectorize(function(s) DePril_RecursiveDensity(s, n = 10, distr = "binom", size = 5, prob = 0.20))
DePril_RecursiveDensityVec(s = 0:5)
DePril_RecursiveDensity(s = 10, n = 10, distr = "binom", size = 5, prob = 0.20)
#' @examples
#' pgammaMixture(q = 15, shape = c(3, 5), rate = c(1/7, 1/4))
#' pgammaMixture(q = 15, shape = c(3, 5), scale = c(7, 4))
#' pgammaMixture(q = 15, shape = c(3, 5), rate = c(1/7, 1/4), lower.tail = FALSE)
#'
#' dgammaMixture(x = 15, shape = c(3, 5), scale = c(7, 4))
#' Etronq_gammaMixture(d = 15, shape = c(3, 5), scale = c(7, 4))
#' Etronq_gammaMixture(d = 15, shape = c(3, 5), scale = c(7, 4), less.than.d = FALSE)
#' TVaR_gammaMixture(kap = 0.99, shape = c(3, 5), scale = c(7, 4), k0 = 100)
#'
dgammaMixture <- function(x, shape, rate = 1 / scale, scale = 1 / rate, TOL = 1E-6) {
stopifnot(
length(rate) == 2,
length(rate) == length(shape),
shape > 0,
rate > 0,
TOL >= 0,
x >= 0
)
param_min <- c(shape[which.min(rate)], min(rate))
param_max <- c(shape[-which.min(rate)], rate[-min(rate)])
distr.param <- list(
size = param_min[1],
prob = param_min[2] / param_max[2]
)
upper <- qnbinom(
p = TOL,
size = distr.param$size, prob = distr.param$prob,
lower.tail = FALSE
)
fs <- rep(0, length(x))
for (i in 0:upper) {
fs <- fs + dnbinom(
x = i,
size = distr.param$size, prob = distr.param$prob
) * dgamma(
x = x,
shape = param_min[1] + param_max[1] + i,
rate = param_max[2]
)
}
warning("This is an approximation.")
return(fs)
}
pgammaMixture <- function(q, shape, rate = 1 / scale, scale = 1 / rate, TOL = 1E-6, lower.tail = TRUE) {
stopifnot(
length(rate) == 2,
length(rate) == length(shape),
shape > 0,
rate > 0,
TOL >= 0,
q >= 0
)
param_min <- c(shape[which.min(rate)], min(rate))
param_max <- c(shape[-which.min(rate)], rate[-min(rate)])
distr.param <- list(
size = param_min[1],
prob = param_min[2] / param_max[2]
)
upper <- qnbinom(
p = TOL,
size = distr.param$size, prob = distr.param$prob,
lower.tail = FALSE
)
Fs <- rep(0, length(q))
for (i in 0:upper) {
Fs <- Fs + dnbinom(
x = i,
size = distr.param$size, prob = distr.param$prob
) * pgamma(
q = q,
shape = param_min[1] + param_max[1] + i,
rate = param_max[2]
)
}
warning("This is an approximation.")
if (lower.tail) {
return(Fs)
} else {
return(1 - Fs)
}
}
Etronq_gammaMixture <- function(d, shape, rate = 1 / scale, scale = 1 / rate, TOL = 1E-6, less.than.d = TRUE) {
stopifnot(
length(rate) == 2,
length(rate) == length(shape),
shape > 0,
rate > 0,
TOL >= 0,
d >= 0
)
param_min <- c(shape[which.min(rate)], min(rate))
param_max <- c(shape[-which.min(rate)], rate[-min(rate)])
distr.param <- list(
size = param_min[1],
prob = param_min[2] / param_max[2]
)
upper <- qnbinom(
p = TOL,
size = distr.param$size, prob = distr.param$prob,
lower.tail = FALSE
)
Etronq.gammaMixture <- rep(0, length(q))
if (less.than.d) {
for (i in 0:upper) {
Etronq.gammaMixture <- Etronq.gammaMixture +
dnbinom(
x = i,
size = distr.param$size, prob = distr.param$prob
) * pgamma(
q = d,
shape = param_min[1] + param_max[1] + i,
rate = param_max[2]
) *
(
(param_min[1] + param_max[1] + i) /
param_max[2]
)
}
} else {
for (i in 0:upper) {
Etronq.gammaMixture <- Etronq.gammaMixture +
dnbinom(
x = i,
size = distr.param$size, prob = distr.param$prob
) * pgamma(
q = d,
shape = param_min[1] + param_max[1] + i,
rate = param_max[2],
lower.tail = F
) *
(
(param_min[1] + param_max[1] + i) /
param_max[2]
)
}
}
warning("This is an approximation.")
return(Etronq.gammaMixture)
}
ggplot(data = data.frame(x = c(0, 10)), aes(x)) +
stat_function(
fun = ~pgammaMixture(q = .x, shape = shapes, rate = rates),
) +
stat_function(
fun = ~pgammaMixture(q = .x, shape = shapes, rate = rates),
xlim = c(0, 9),
geom = "area",
fill = "red",
alpha = 0.7
) +
ylab("f(x)")
shapes <- c(3, 5)
rates <- c(7, 4)
ggplot(data = data.frame(x = c(0, 10)), aes(x)) +
stat_function(
fun = ~pgammaMixture(q = .x, shape = shapes, rate = rates),
) +
stat_function(
fun = ~pgammaMixture(q = .x, shape = shapes, rate = rates),
xlim = c(0, 9),
geom = "area",
fill = "red",
alpha = 0.7
) +
ylab("f(x)")
ggplot(data = data.frame(x = c(0, 10)), aes(x)) +
stat_function(
fun = ~dgammaMixture(x = .x, shape = shapes, rate = rates),
) +
stat_function(
fun = ~dgammaMixture(x = .x, shape = shapes, rate = rates),
xlim = c(0, 9),
geom = "area",
fill = "red",
alpha = 0.7
) +
ylab("f(x)")
source('~/OneDrive - Université Laval/Packages/RESSOURCE/Mixtures/plot_gammamixture.R', echo=TRUE)
ggplot(data = data.frame(x = c(0, 10)), aes(x)) +
stat_function(
fun = ~pgammaMixture(q = .x, shape = shapes, rate = rates),
) +
stat_function(
fun = ~pgammaMixture(q = .x, shape = shapes, rate = rates),
xlim = c(0, 9),
geom = "area",
fill = "red",
alpha = 0.7
) +
ylab("f(x)")
ggplot(data = data.frame(x = c(0, 10)), aes(x)) +
stat_function(
fun = ~dgammaMixture(x = .x, shape = shapes, rate = rates),
) +
stat_function(
fun = ~dgammaMixture(x = .x, shape = shapes, rate = rates),
xlim = c(0, 9),
geom = "area",
fill = "red",
alpha = 0.7
) +
ylab("f(x)")
ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20))
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20)),
xlim = c(0, 0.5),
geom = "area",
fill = "red",
alpha = 0.7
) +
theme_bw()
TVaR_gammaMixture <- function(kap, shape, rate = 1 / scale, scale = 1 / rate, less.than.d = TRUE, TOL = 1E-6, k0) {
stopifnot(
length(rate) == 2,
length(rate) == length(shape),
shape > 0,
rate > 0,
TOL >= 0,
kap >= 0,
kap <= 1
)
param_min <- c(shape[which.min(rate)], min(rate))
param_max <- c(shape[-which.min(rate)], rate[-min(rate)])
distr.param <- list(
size = param_min[1],
prob = param_min[2] / param_max[2]
)
upper <- qnbinom(
p = TOL,
size = distr.param$size, prob = distr.param$prob,
lower.tail = FALSE
)
vark <- optimise(f = function(x) abs(pgammaMixture(q = x, shape = shape, scale = scale) - kap), interval = c(0, k0), tol = TOL)$minimum
TVaR.gammaMixture <- Etronq_gammaMixture(d = vark, shape = shape, rate = rate, TOL = TOL, less.than.d = FALSE) / (1 - kap)
warning("This is an approximation.")
return(TVaR.gammaMixture)
}
ggplot(data = data.frame(x = c(0, 1)), aes(x)) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20))
) +
scale_x_continuous(labels = percent) +
labs(
title = TeX('$TVaR_{\\kappa}(S)$'),
subtitle = TeX('$X_1 \\perp X_2$ suivent des distributions Gamma'),
x = TeX('$\\kappa$')
) +
stat_function(
fun = Vectorize(function(x) TVaR_gammaMixture(kap = x, shape = shapes, rate = rates, k0 = 20)),
xlim = c(0, 0.5),
geom = "area",
fill = "red",
alpha = 0.7
) +
theme_bw()
ggplot(data = data.frame(x = c(0, 10)), aes(x)) +
stat_function(
fun = ~dgammaMixture(x = .x, shape = shapes, rate = rates),
) +
stat_function(
fun = ~dgammaMixture(x = .x, shape = shapes, rate = rates),
xlim = c(0, 9),
geom = "area",
fill = "red",
alpha = 0.7
) +
ylab("f(x)")
Distributacalcul::Distributacalcul_vis(law = "norm")
Distributacalcul::Distributacalcul_vis(law = "pareto")
Distributacalcul::Distributacalcul_vis(law = "gamma")
library(Distributacalcul)
