## Packages nécessaires pour l'application
library(shiny)
library(actuar)
library(tvarPackage)

# Define UI (USER INTERFACE) ----
ui <- fluidPage(

   # Titre de l'Application
   titlePanel("Lois de probabilité"),
   # Pour pouvoir utiliser symbole mathématique
   withMathJax(),


   ## Barre latérale avec contrôle
   sidebarLayout(
      sidebarPanel(
        selectInput("loi", label = "Loi de probabilité",
                     choices = c("Gamma", #panel
                                 "Pareto", #panel
                                 "Normale", #panel
                                 "Binomiale",
                                 "Géométrique",
                                 "Poisson",
                                 "Exponentielle",
                                 "Lognormale",
                                 "Beta")),

        # LOI GAMMA ####
        conditionalPanel(
            # Condition à respecter
            condition = "input.loi == 'Gamma'",
            ## Éléments à afficher si la condition est respectée
            helpText("$$ X \\sim Gamma(\\alpha, \\beta) $$"),
            sliderInput("alphaG", "Paramètre \\( \\alpha \\)",
                        min = 1, max = 20,
                        value = 2),
            numericInput("betaG", "Paramètre \\( \\beta \\)",
                        min = 0, max = 5,
                        value = 1)
        ),
        # LOI PARETO ####
        conditionalPanel(
            # Condition à respecter
            condition = "input.loi == 'Pareto'",
            ## Éléments à afficher si la condition est respectée
            helpText("$$ X \\sim Pa(\\alpha, \\lambda) $$"),
            sliderInput("alphaP", "Paramètre \\( \\alpha \\)",
                        min = 1, max = 20,
                        value = 2),
            numericInput("lambdaP", "Paramètre \\( \\lambda \\)",
                         min = 0, max = 5,
                         value = 1)
        ),
        # LOI NORMALE ####
        conditionalPanel(
            # Condition à respecter
            condition = "input.loi == 'Normale'",
            ## Éléments à afficher si la condition est respectée
            helpText("$$ X \\sim N(\\mu, \\sigma) $$"),
            sliderInput("muN", "Paramètre \\( \\mu \\)",
                        min = 1, max = 20,
                        value = 2),
            numericInput("sigN", "Paramètre \\( \\sigma \\)",
                         min = 0, max = 5,
                         value = 1)
        ),
        # LOI BINOMIALE ####
        conditionalPanel(
          # Condition à respecter
          condition = "input.loi == 'Binomiale'",
          ## Éléments à afficher si la condition est respectée
          helpText("$$ X \\sim Bin(n, p) $$"),
          sliderInput("nBin", "Paramètre \\( n \\)",
                      min = 1, max = 100,
                      value = 5),
          sliderInput("pBin", "Paramètre \\( p \\)",
                       min = 0, max = 1,
                       value = 0.5)
        ),
        # LOI GÉOMÉTRIQUE ####
        conditionalPanel(
          # Condition à respecter
          condition = "input.loi == 'Géométrique'",
          ## Éléments à afficher si la condition est respectée
          helpText("$$ X \\sim Géom(q) $$"),
          sliderInput("qGeo", "Paramètre \\( q \\)",
                      min = 1, max = 100,
                      value = 5)
        ),
        # LOI EXPONENTIELLE ####
        conditionalPanel(
          # Condition à respecter
          condition = "input.loi == 'Exponentielle'",
          ## Éléments à afficher si la condition est respectée
          helpText("$$ X \\sim Exp(\\beta) $$"),
          numericInput("betaE", "Paramètre \\( \\beta \\)",
                      min = 1, max = 100,
                      value = 5)
        ),
        # LOI BETA ####
        conditionalPanel(
          # Condition à respecter
          condition = "input.loi == 'Beta'",
          ## Éléments à afficher si la condition est respectée
          helpText("$$ X \\sim Beta(\\alpha, \\beta) $$"),
          sliderInput("alphaB", "Paramètre \\( \\alpha \\)",
                      min = 1, max = 100,
                      value = 5),
          sliderInput("betaB", "Paramètre \\( \\beta \\)",
                      min = 1, max = 100,
                      value = 5)
        ),
        
        
        # LOI POISSON ####
        conditionalPanel(
          # Condition à respecter
          condition = "input.loi == 'Poisson'",
          ## Éléments à afficher si la condition est respectée
          helpText("$$ X \\sim Pois(\\lambda) $$"),
          sliderInput("lamPois", "Paramètre \\( \\lambda \\)",
                      min = 1, max = 100,
                      value = 5))
      ),
   

      # Résultats de l'application
      mainPanel(
          tabsetPanel(
              # Graphique ####
            tabPanel("Graphique",
                     h2("Représentation graphique"),
                     fluidRow(
                         column(6,
                                sliderInput("range",
                                            "Intervalle des X",
                                            min = 0, max = 100,
                                            value = c(0, 10))
                                ),
                         column(6,
                                selectInput("graphcolor",
                                            "Couleur du graphique",
                                            choices = c(
                                                "black",
                                                "red",
                                                "blue",
                                                "orange",
                                                "darkgreen",
                                                "gold"
                                            ),
                                            selected = "blue")
                                )
                     ),

                     plotOutput("plot")
                     ),
              # Formules ####
            tabPanel("Formules",
                     h2("Formules théoriques"),
                     uiOutput("densite"),
                     uiOutput("esperance")
                     ),
            tabPanel("Calculs",
                     h2("Calculatrice des moments 
                        et mesures de risques"),
                     tableOutput("calculs")
                     )
            ),


            # À la toute fin du main panel
            helpText("Auteur : Gabriel Crépeault-Cauchon")
          )
      )
   )


# Define server logic required ----
server <- function(input, output){
  source("reactive.R", local = T)
  
  output$plot <- renderPlot({
      if (input$loi == "Gamma")
          curve(dgamma(x, input$alphaG, input$betaG),
                from = input$range[1],
                to = input$range[2],
                col = input$graphcolor,
                lwd = 3,
                xlab = expression(x),
                ylab = "Densité")
      else if
      (input$loi == "Pareto")
          curve(dpareto(x, input$alphaP, input$lambdaP),
                from = input$range[1],
                to = input$range[2],
                col = input$graphcolor,
                lwd = 3,
                xlab = expression(x),
                ylab = "Densité")
      else if
      (input$loi == "Normale")
          curve(dnorm(x, input$muN, input$sigN),
                from = input$range[1],
                to = input$range[2],
                col = input$graphcolor,
                lwd = 3,
                xlab = expression(x),
                ylab = "Densité")

    else if
    (input$loi == "Binomiale")
      hist(rbinom(5000,
                  input$nBin, input$pBin),
            col = input$graphcolor,
            xlab = expression(x),
            ylab = "Densité",
           probability = T)
    else if
    (input$loi == "Pareto")
      curve(dpareto(x, input$alphaP, input$lambdaP),
            from = input$range[1],
            to = input$range[2],
            col = input$graphcolor,
            lwd = 3,
            xlab = expression(x),
            ylab = "Densité")
    else if
    (input$loi == "Exponentielle")
      curve(dexp(x, input$betaE),
            from = input$range[1],
            to = input$range[2],
            col = input$graphcolor,
            lwd = 3,
            xlab = expression(x),
            ylab = "Densité")
    else if
    (input$loi == "Poisson")
      hist(rpois(5000,
                  input$lamPois),
           col = input$graphcolor,
           xlab = expression(x),
           ylab = "Densité",
           probability = T)




  })

  output$densite <- renderUI({
    if (input$loi == "Pareto")
      withMathJax(p("$$ f(x) = \\frac{\\alpha \\lambda^\\alpha}{(\\lambda + \\alpha)^{\\alpha+1}} $$"))

    else if (input$loi == "Gamma")
      withMathJax("$$ f(x) = \\frac{\\beta^\\alpha x^{\\alpha - 1} e^{-\\beta x}}{\\Gamma(\\alpha)}$$")

    else if (input$loi == "Normale")
      withMathJax(
        "$$ f(x) = \\frac{1}{\\sqrt{2\\pi}\\sigma} e^{-\\frac{1}{2} \\left( \\frac{x - \\mu}{\\sigma} \\right)^2}$$"
      )

    else if (input$loi == "Binomiale")
      withMathJax(
        "$$
        P(X = k) = \\binom{n}{k} p^k (1-p)^{n-k}
        $$"
      )

    else if (input$loi == "Géométrique")
      withMathJax(
        "$$
        P(X = k) = q(1-q)^k
        $$"
      )

    else if (input$loi == "Poisson")
      withMathJax(
        "$$
        P(X = k) = \\frac{\\lambda^k e^{-\\lambda}}{k!}
        $$"
      )
  })

  output$repartition <- renderUI({

  })
  

  output$esperance <- renderUI({
    if (input$loi == "Gamma")
      withMathJax(p("$$E[X] = \\frac{\\alpha}{\\beta}$$"))
    else if (input$loi == "Pareto")
      withMathJax(p("$$E[X] = \\frac{\\lambda}{\\alpha - 1}$$"))
    else if (input$loi == "Normale")
      withMathJax(p("$$E[X] = \\mu$$"))
    else if (input$loi == "Binomiale")
      withMathJax(p("$$E[X] = np$$"))
    else if (input$loi == "Exponentielle")
      withMathJax(p("$$E[X] = \\frac{1}{\\beta}$$"))
    else if (input$loi == "Beta")
      withMathJax(p("$$E[X] = \\frac{\\alpha}{\\alpha + \\beta}$$"))
    else if (input$loi == "Lognormale")
      withMathJax(p("$$E[X] = e^{\\mu + \\frac{\\sigma^2}{2}}$$"))
    
    
    
    
    
  })
  

  
  output$calculs <- renderTable({
    data.frame(Calcul_de = c("Espérance",
                             "Variance",
                             "Espérance tronquée",
                             "Espérance limitée",
                             "Stop-Loss",
                             "Mean Excess-Loss",
                             "VaR",
                             "TVaR"), Valeur = data())
  })


}

# On exécute l'application
shinyApp(ui = ui, server = server)

