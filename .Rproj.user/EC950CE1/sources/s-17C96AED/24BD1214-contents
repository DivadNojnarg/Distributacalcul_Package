## Programmation des fonctions des lois Makeham et Gompertz
hgompertz <- function(t = 0, x = 0, beta, gam, Tx = T)
{
    if (x < 0)
        stop("X doit être supérieur à 0")
    if  (Tx)
        return(beta * exp(gam * (x+t)))
    else
        beta * exp(gam * x)
    
}

dgompertz <- function(t, x = 0, beta, gam, Tx = T)
{
    if (Tx)
        hgompertz(t, x, beta, gam) * (1 - pgompertz(t, x, beta, gam))
    else
        hgompertz(x, beta, gam, Tx = F) * (1 - pgompertz(t, x, beta, gam, Tx = F)) 
}


pgompertz <- function(t, x = 0, beta, gam, Tx = T)
{
    if (Tx)
        beta <- beta * exp(gam  * x)
    
    1 - exp(-(beta / gam) * (exp(gam * t) - 1))
}

qgompertz <- function(q, x = 0, beta, gam, Tx = T)
{
    if (Tx)
        beta <- beta * exp(gam * x)
    
    log(1 - (gam / beta) * log(1 - q)) / gam
}

Etx_gompertz <- function(x = 0, beta, gam, floor = T)
{
    w <- 0:300 # âge limite exagéré
    if (floor)
    {
        ## Méthode à utiliser si on prends la partie entière
        f <- function(k) k * (pgompertz(k + 1, x, beta, gam) - pgompertz(k, x, beta, gam))
        sum(sapply(w, f))
    }
    else
    {
        ## Méthode à utiliser si on veut la valeur exacte
        require(pracma)
        f <- function(t) (1 - pgompertz(t, x, beta, gam))
        # on utilise la propriété de la fonction de survie.
        quad(f, 0, max(w))
    }
}

Vtx_gompertz <- function(x = 0, beta, gam, floor = T)
{
    w <- 0:300 # âge limite exagéré
    if (floor)
    {
        ## Méthode à utiliser si on prends la partie entière
        f <- function(k) k * (pgompertz(k + 1, x, beta, gam) - pgompertz(k, x, beta, gam))
        fcarre <- function(k) k^2 * (pgompertz(k + 1, x, beta, gam) - pgompertz(k, x, beta, gam))
        sum(sapply(w, fcarre)) - sum(sapply(w, f))^2
    }
    else
    {
        ## Méthode à utiliser si on veut la valeur exacte
        f <- function(t) (1 - pgompertz(t, x, beta, gam))
        
        fcarre <- function(t)
        {
            t^2 * beta * exp(gam*(t + x)) * exp((-beta/gam) * exp(gam * x) * (exp(gam * t) - 1))
        }
        
        Etx <- integrate(f, 0, max(w))$value
        Etxcarre <- integrate(fcarre, 0, max(w))$value
        Etxcarre - Etx^2
    }
}

TVaRtx_gompertz <- function(kappa, x = 0, beta, gam)
{
    # Approche très théorique, pas de forme explicite.
    f <- function(t) qtxgompertz(t, x, beta, gam)
    integrate(f, kappa, 1)$ value / (1-kappa)
}
